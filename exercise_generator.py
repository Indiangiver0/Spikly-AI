import json
import os
import asyncio
import random
from datetime import datetime
from typing import Dict, List, Any, Tuple
from openai import OpenAI
from config import OPENAI_API_KEY

class ErrorAnalysisAndPracticeSystem:
    def __init__(self, dialog_manager):
        self.dialog_manager = dialog_manager
        self.client = OpenAI(api_key=OPENAI_API_KEY)
        self.exercise_types = [
            "word_replacement",      # –ó–∞–º–µ–Ω–∏ —Å–ª–æ–≤–æ
            "translation_en_ru",     # –ü–µ—Ä–µ–≤–µ–¥–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            "translation_ru_en",     # –ü–µ—Ä–µ–≤–µ–¥–∏ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π  
            "simple_sentences",      # –°–æ—Å—Ç–∞–≤–∏—Ç—å 5 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            "text_composition"       # –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Å 2 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ —Å–ª–æ–≤–∞
        ]
    
    async def run_full_error_analysis_and_practice(self):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        """
        print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
        
        # 1. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
        dialog_errors = await self.analyze_recent_dialogs_for_errors()
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        translation_requests = self.get_user_translation_requests()
        
        # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—à–∏–±–æ–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        existing_errors = self.load_user_error_profile()
        
        # 4. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        practice_session = await self.create_practice_session(
            dialog_errors, translation_requests, existing_errors
        )
        
        return practice_session
    
    async def analyze_recent_dialogs_for_errors(self) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∏–∞–ª–æ–≥–∞
        recent_dialogs = self.dialog_manager.get_recent_dialogs(limit=3)
        all_errors = []
        
        for dialog in recent_dialogs:
            dialog_id = dialog.get("dialog_id", "unknown")
            scenario = dialog.get("scenario", "unknown")
            messages = dialog.get("messages", [])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_messages = [msg["content"] for msg in messages if msg["role"] == "user"]
            
            if user_messages:
                print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ {dialog_id[:8]}... ({len(user_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫ OpenAI
                dialog_errors = await self.analyze_user_messages_for_errors(
                    user_messages, dialog_id, scenario
                )
                all_errors.extend(dialog_errors)
        
        return all_errors
    
    async def analyze_user_messages_for_errors(self, user_messages: List[str], dialog_id: str, scenario: str) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é OpenAI
        """
        messages_text = "\n".join([f"{i+1}. {msg}" for i, msg in enumerate(user_messages)])
        
        analysis_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –í–°–ï–• —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫:
        
        –°—Ü–µ–Ω–∞—Ä–∏–π –¥–∏–∞–ª–æ–≥–∞: {scenario}
        –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        {messages_text}
        
        –ù–∞–π–¥–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –í–°–ï –æ—à–∏–±–∫–∏:
        1. –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–≤—Ä–µ–º–µ–Ω–∞, –∞—Ä—Ç–∏–∫–ª–∏, –ø—Ä–µ–¥–ª–æ–≥–∏, –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ)
        2. –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤, –∫–æ–ª–ª–æ–∫–∞—Ü–∏–∏)
        3. –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        4. –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ)
        5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –≤–º–µ—Å—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö
        6. –ù–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∏–ª–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
        7. –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏
        
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "errors": [
                {{
                    "original_phrase": "—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ —Å –æ—à–∏–±–∫–æ–π",
                    "error_type": "—Ç–∏–ø –æ—à–∏–±–∫–∏",
                    "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
                    "correction": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                    "severity": "low/medium/high",
                    "context": "–≤ –∫–∞–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±—ã–ª–∞ –æ—à–∏–±–∫–∞"
                }}
            ]
        }}
        
        –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏: {{"errors": []}}
        """
        
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—à–∏–±–æ–∫ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."},
                    {"role": "user", "content": analysis_prompt}
                ],
                temperature=0.2,
                response_format={"type": "json_object"}
            )
            
            analysis_result = json.loads(response.choices[0].message.content)
            errors = analysis_result.get("errors", [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ
            for error in errors:
                error["dialog_id"] = dialog_id
                error["scenario"] = scenario
                error["timestamp"] = datetime.now().isoformat()
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ")
            return errors
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞ {dialog_id}: {e}")
            return []
    
    def get_user_translation_requests(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        help_requests_file = os.path.join(self.dialog_manager.logs_dir, "help_requests.json")
        translation_requests = []
        
        if os.path.exists(help_requests_file):
            try:
                with open(help_requests_file, 'r', encoding='utf-8') as f:
                    help_requests = json.load(f)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥—ã
                for request in help_requests:
                    if request.get("request_type") == "translation" or "–ø–µ—Ä–µ–≤–æ–¥" in request.get("user_input", "").lower():
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
                        ai_response = request.get("ai_response", "")
                        translation_requests.append({
                            "original_text": self.extract_original_from_translation(ai_response),
                            "translation": self.extract_translation_from_response(ai_response),
                            "dialog_id": request.get("dialog_id", ""),
                            "timestamp": request.get("timestamp", "")
                        })
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(translation_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        return translation_requests
    
    def extract_original_from_translation(self, ai_response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - –∏—â–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ü–ï–†–ï–í–û–î:" –¥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        lines = ai_response.split('\n')
        for line in lines:
            if '–ü–ï–†–ï–í–û–î:' in line:
                return line.replace('–ü–ï–†–ï–í–û–î:', '').strip()
        return ""
    
    def extract_translation_from_response(self, ai_response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        lines = ai_response.split('\n')
        for i, line in enumerate(lines):
            if '–ü–ï–†–ï–í–û–î:' in line and i + 1 < len(lines):
                return lines[i + 1].strip()
        return ""
    
    def load_user_error_profile(self) -> Dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        error_profile_file = os.path.join(self.dialog_manager.logs_dir, "user_error_profile.json")
        
        if os.path.exists(error_profile_file):
            try:
                with open(error_profile_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ—à–∏–±–æ–∫: {e}")
        
        return {}
    
    async def create_practice_session(self, dialog_errors: List[Dict], translation_requests: List[Dict], existing_errors: Dict) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫ –Ω–æ–≤—ã–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
        updated_profile = await self.update_error_profile(dialog_errors, existing_errors)
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏
        errors_to_practice = self.select_errors_for_practice(updated_profile, max_errors=5)
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏ (–ø–æ 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫—É)
        practice_exercises = []
        
        for error_key, error_data in errors_to_practice.items():
            exercises = await self.generate_exercises_for_error(error_data, translation_requests)
            practice_exercises.extend(exercises)
        
        practice_session = {
            "session_id": f"practice_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "timestamp": datetime.now().isoformat(),
            "total_errors_analyzed": len(dialog_errors),
            "errors_for_practice": len(errors_to_practice),
            "total_exercises": len(practice_exercises),
            "exercises": practice_exercises,
            "error_profile_snapshot": errors_to_practice
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        self.save_practice_session(practice_session)
        
        print(f"üéØ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(practice_exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è {len(errors_to_practice)} –æ—à–∏–±–æ–∫")
        return practice_session
    
    async def update_error_profile(self, new_errors: List[Dict], existing_profile: Dict) -> Dict:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        for error in new_errors:
            error_key = f"{error['error_type']}_{error['original_phrase'].lower().replace(' ', '_')}"
            
            if error_key in existing_profile:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                existing_profile[error_key]["count"] += 1
                existing_profile[error_key]["last_seen_timestamp"] = error["timestamp"]
                existing_profile[error_key]["last_seen_dialog_id"] = error["dialog_id"]
                existing_profile[error_key]["history"].append({
                    "dialog_id": error["dialog_id"],
                    "timestamp": error["timestamp"],
                    "context": error.get("context", "")
                })
            else:
                # –ù–æ–≤–∞—è –æ—à–∏–±–∫–∞
                existing_profile[error_key] = {
                    "original_phrase": error["original_phrase"],
                    "error_type": error["error_type"],
                    "explanation": error["explanation"],
                    "correction": error["correction"],
                    "severity": error.get("severity", "medium"),
                    "count": 1,
                    "exercise_repetition_count": 6,  # X6 - –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 6 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                    "first_seen_timestamp": error["timestamp"],
                    "last_seen_timestamp": error["timestamp"],
                    "first_seen_dialog_id": error["dialog_id"],
                    "last_seen_dialog_id": error["dialog_id"],
                    "history": [{
                        "dialog_id": error["dialog_id"],
                        "timestamp": error["timestamp"],
                        "context": error.get("context", "")
                    }]
                }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        self.save_error_profile(existing_profile)
        return existing_profile
    
    def select_errors_for_practice(self, error_profile: Dict, max_errors: int = 5) -> Dict:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5)
        """
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (exercise_repetition_count > 0)
        eligible_errors = {k: v for k, v in error_profile.items() if v.get("exercise_repetition_count", 0) > 0}
        
        if not eligible_errors:
            return {}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Å–Ω–∞—á–∞–ª–∞ —Å –≤—ã—Å–æ–∫–∏–º —Å—á–µ—Ç—á–∏–∫–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –ø–æ—Ç–æ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        sorted_errors = sorted(
            eligible_errors.items(),
            key=lambda x: (x[1].get("exercise_repetition_count", 0), x[1].get("count", 0)),
            reverse=True
        )
        
        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 5 –æ—à–∏–±–æ–∫
        selected = dict(sorted_errors[:max_errors])
        
        print(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(selected)} –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏:")
        for key, data in selected.items():
            print(f"  - {data['original_phrase']} ({data['error_type']}) X{data['exercise_repetition_count']}")
        
        return selected
    
    async def generate_exercises_for_error(self, error_data: Dict, translation_requests: List[Dict]) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏
        """
        exercises = []
        original_phrase = error_data["original_phrase"]
        correction = error_data["correction"]
        error_type = error_data["error_type"]
        exercise_count = error_data.get("exercise_repetition_count", 6)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞
        if exercise_count <= 3:
            # X1, X2, X3 - –∏–Ω–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            exercise_types = self.get_exercise_types_for_low_count()
        else:
            # X4, X5, X6 - –æ–±—ã—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            exercise_types = self.get_exercise_types_for_high_count()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        for i in range(3):
            exercise_type = exercise_types[i % len(exercise_types)]
            exercise = await self.generate_single_exercise(
                original_phrase, correction, error_type, exercise_type, i + 1
            )
            exercises.append(exercise)
        
        return exercises
    
    def get_exercise_types_for_low_count(self) -> List[str]:
        """–¢–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è X1-X3 (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ)"""
        return ["word_replacement", "translation_en_ru", "text_composition"]
    
    def get_exercise_types_for_high_count(self) -> List[str]:
        """–¢–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è X4-X6 (–æ–±—ã—á–Ω—ã–µ)"""
        return ["word_replacement", "translation_en_ru", "translation_ru_en"]
    
    async def generate_single_exercise(self, original_phrase: str, correction: str, error_type: str, exercise_type: str, exercise_num: int) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        """
        exercise_prompt = self.get_exercise_prompt(original_phrase, correction, error_type, exercise_type)
        
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞."},
                    {"role": "user", "content": exercise_prompt}
                ],
                temperature=0.7
            )
            
            exercise_content = response.choices[0].message.content
            
            return {
                "exercise_id": f"{error_type}_{exercise_type}_{exercise_num}_{datetime.now().strftime('%H%M%S')}",
                "exercise_type": exercise_type,
                "exercise_number": exercise_num,
                "original_error": original_phrase,
                "correct_form": correction,
                "error_type": error_type,
                "content": exercise_content,
                "completed": False,
                "attempts": 0,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
            return self.create_fallback_exercise(original_phrase, correction, exercise_type, exercise_num)
    
    def get_exercise_prompt(self, original_phrase: str, correction: str, error_type: str, exercise_type: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        """
        base_info = f"–û—à–∏–±–∫–∞: '{original_phrase}' ‚Üí –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '{correction}' (–¢–∏–ø: {error_type})"
        
        if exercise_type == "word_replacement":
            return f"""
            {base_info}
            
            –°–æ–∑–¥–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–ó–∞–º–µ–Ω–∏ —Å–ª–æ–≤–æ":
            –î–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º/—Ñ—Ä–∞–∑–æ–π –∏ –ø–æ–ø—Ä–æ—Å–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ.
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            –ó–ê–î–ê–ù–ò–ï: [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π, –≤—ã–¥–µ–ª–∏ –æ—à–∏–±–∫—É ***–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ***]
            –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢: [–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]
            """
            
        elif exercise_type == "translation_en_ru":
            return f"""
            {base_info}
            
            –°–æ–∑–¥–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π":
            –î–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            –ó–ê–î–ê–ù–ò–ï: –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: "[–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π]"
            –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢: [—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥]
            """
            
        elif exercise_type == "translation_ru_en":
            return f"""
            {base_info}
            
            –°–æ–∑–¥–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π":
            –î–∞–π —Ä—É—Å—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Ç—Ä–µ–±—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã.
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            –ó–ê–î–ê–ù–ò–ï: –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: "[—Ä—É—Å—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]"
            –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢: [–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π]
            """
            
        elif exercise_type == "simple_sentences":
            return f"""
            {base_info}
            
            –°–æ–∑–¥–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–°–æ—Å—Ç–∞–≤—å—Ç–µ 5 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π":
            –ü–æ–ø—Ä–æ—Å–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å 5 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É.
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            –ó–ê–î–ê–ù–ò–ï: –°–æ—Å—Ç–∞–≤—å—Ç–µ 5 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è "[–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞]"
            –ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í:
            1. [–ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
            2. [–ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
            3. [–ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
            4. [–ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
            5. [–ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
            """
            
        elif exercise_type == "text_composition":
            return f"""
            {base_info}
            
            –°–æ–∑–¥–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞":
            –ü–æ–ø—Ä–æ—Å–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ 3+ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å 2 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã.
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            –ó–ê–î–ê–ù–ò–ï: –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è "[–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞]" –î–í–ê –†–ê–ó–ê. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º.
            –ü–†–ò–ú–ï–† –û–¢–í–ï–¢–ê: [–ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –¥–≤—É–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã]
            """
        
        return f"–°–æ–∑–¥–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏: {original_phrase} ‚Üí {correction}"
    
    def create_fallback_exercise(self, original_phrase: str, correction: str, exercise_type: str, exercise_num: int) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        """
        return {
            "exercise_id": f"fallback_{exercise_type}_{exercise_num}_{datetime.now().strftime('%H%M%S')}",
            "exercise_type": exercise_type,
            "exercise_number": exercise_num,
            "original_error": original_phrase,
            "correct_form": correction,
            "error_type": "unknown",
            "content": f"–ó–ê–î–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –≤ —Ñ—Ä–∞–∑–µ '{original_phrase}'\n–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢: {correction}",
            "completed": False,
            "attempts": 0,
            "timestamp": datetime.now().isoformat()
        }
    
    def save_practice_session(self, session_data: Dict):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        """
        sessions_dir = os.path.join(self.dialog_manager.logs_dir, "practice_sessions")
        if not os.path.exists(sessions_dir):
            os.makedirs(sessions_dir)
        
        session_file = os.path.join(sessions_dir, f"{session_data['session_id']}.json")
        
        try:
            with open(session_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, ensure_ascii=False, indent=4)
            print(f"üíæ –°–µ—Å—Å–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {session_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    def save_error_profile(self, error_profile: Dict):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫
        """
        error_profile_file = os.path.join(self.dialog_manager.logs_dir, "user_error_profile.json")
        
        try:
            with open(error_profile_file, 'w', encoding='utf-8') as f:
                json.dump(error_profile, f, ensure_ascii=False, indent=4)
            print(f"üíæ –ü—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(error_profile)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ—à–∏–±–æ–∫: {e}")
    
    def complete_exercise(self, session_id: str, exercise_id: str, user_answer: str, is_correct: bool):
        """
        –û—Ç–º–µ—á–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
        session_file = os.path.join(self.dialog_manager.logs_dir, "practice_sessions", f"{session_id}.json")
        
        try:
            with open(session_file, 'r', encoding='utf-8') as f:
                session_data = json.load(f)
            
            # –ù–∞—Ö–æ–¥–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            for exercise in session_data["exercises"]:
                if exercise["exercise_id"] == exercise_id:
                    exercise["completed"] = True
                    exercise["user_answer"] = user_answer
                    exercise["is_correct"] = is_correct
                    exercise["attempts"] += 1
                    exercise["completion_timestamp"] = datetime.now().isoformat()
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            with open(session_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, ensure_ascii=False, indent=4)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if is_correct:
                new_coin_count = self.dialog_manager.add_coins(1, "exercise_completed")
                print(f"ü™ô +1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ! –í—Å–µ–≥–æ: {new_coin_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫
            error_completed = self.update_error_profile_after_exercise(exercise_id, is_correct)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω—É—é –æ—Ç—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
            if error_completed:
                bonus_coins = self.dialog_manager.add_coins(5, "error_mastered")
                print(f"üéâ +5 –º–æ–Ω–µ—Ç –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω—É—é –æ—Ç—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏! –í—Å–µ–≥–æ: {bonus_coins}")
                return {"coins_earned": 6, "error_mastered": True}  # 1 + 5 –º–æ–Ω–µ—Ç
            
            return {"coins_earned": 1 if is_correct else 0, "error_mastered": False}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
            return {"coins_earned": 0, "error_mastered": False}
    
    def update_error_profile_after_exercise(self, exercise_id: str, is_correct: bool) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞ (–¥–æ—Å—Ç–∏–≥–ª–∞ X0)
        """
        error_profile = self.load_user_error_profile()
        error_completed = False
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—à–∏–±–∫—É –ø–æ exercise_id
        for error_key, error_data in error_profile.items():
            if error_key in exercise_id or error_data["original_phrase"].replace(" ", "_") in exercise_id:
                if is_correct:
                    # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    error_data["exercise_repetition_count"] = max(0, error_data["exercise_repetition_count"] - 1)
                    
                    # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –¥–æ—à–µ–ª –¥–æ 0 - –æ—à–∏–±–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                    if error_data["exercise_repetition_count"] == 0:
                        print(f"üéâ –û—à–∏–±–∫–∞ '{error_data['original_phrase']}' –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞!")
                        # –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
                        error_data["completed"] = True
                        error_data["completion_timestamp"] = datetime.now().isoformat()
                        error_completed = True
                else:
                    # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    error_data["exercise_repetition_count"] += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏. –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ X{error_data['exercise_repetition_count']}")
                
                error_data["last_exercise_timestamp"] = datetime.now().isoformat()
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        self.save_error_profile(error_profile)
        return error_completed
    
    async def check_exercise_answer(self, exercise: Dict, user_answer: str) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenAI
        """
        exercise_content = exercise.get("content", "")
        correct_form = exercise.get("correct_form", "")
        original_error = exercise.get("original_error", "")
        exercise_type = exercise.get("exercise_type", "")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_prompt = f"""
        –ü—Ä–æ–≤–µ—Ä—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É.
        
        –¢–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {exercise_type}
        –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: {original_error}
        –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {correct_form}
        
        –ó–∞–¥–∞–Ω–∏–µ:
        {exercise_content}
        
        –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_answer}"
        
        –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –∏ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "is_correct": true/false,
            "feedback": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–æ—á–µ–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å",
            "correct_answer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—à–∏–±—Å—è"
        }}
        """
        
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."},
                    {"role": "user", "content": check_prompt}
                ],
                temperature=0.2,
                response_format={"type": "json_object"}
            )
            
            result = json.loads(response.choices[0].message.content)
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                "is_correct": False,
                "feedback": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                "correct_answer": correct_form
            } 