import flet as ft
import asyncio
from openai import OpenAI
from config import OPENAI_API_KEY

class HelpSystem:
    def __init__(self):
        self.client = OpenAI(api_key=OPENAI_API_KEY)
        
    async def generate_help_content(self, last_messages, scenario, difficulty):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–º–æ—â–∏"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        context = ""
        last_ai_message_content = ""
        
        for msg in last_messages[-6:]:
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "AI"
            context += f"{role}: {msg['content']}\n"
            if msg["role"] == "assistant":
                last_ai_message_content = msg['content']
        
        if not last_ai_message_content:
            return None
            
        help_prompt = f"""
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
        –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}
        –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}
        –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
        {context}
        
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: "{last_ai_message_content}"
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        
        –ü–ï–†–ï–í–û–î:
        [–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è AI –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫]
        
        –í–ê–†–ò–ê–ù–¢–´_–û–¢–í–ï–¢–û–í:
        1. [–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º]
        2. [–°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º] 
        3. [–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º]
        """
        
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": help_prompt}],
                temperature=0.7
            )
            
            content = response.choices[0].message.content
            return self.parse_help_content(content)
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–º–æ—â–∏: {e}"}
    
    def parse_help_content(self, content):
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–æ—â–∏"""
        result = {
            "translation": "",
            "answer_options": []
        }
        
        lines = content.split('\n')
        current_section = None
        
        for line in lines:
            line = line.strip()
            if line.startswith("–ü–ï–†–ï–í–û–î:"):
                current_section = "translation"
                result["translation"] = line.replace("–ü–ï–†–ï–í–û–î:", "").strip()
            elif line.startswith("–í–ê–†–ò–ê–ù–¢–´_–û–¢–í–ï–¢–û–í:"):
                current_section = "answers"
            elif current_section == "translation" and line:
                result["translation"] += " " + line
            elif current_section == "answers" and line and (line.startswith("1.") or line.startswith("2.") or line.startswith("3.")):
                answer = line[2:].strip()
                if answer:
                    result["answer_options"].append(answer)
        
        return result
    
    async def generate_cultural_context(self, ai_message, scenario, difficulty):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI: "{ai_message}"
        –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}
        
        –ù–∞–π–¥–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∏–¥–∏–æ–º—ã, —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏–ª–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
        –ï—Å–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É.
        """
        
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.5
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def generate_grammar_analysis(self, ai_message, scenario, difficulty):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: "{ai_message}"
        –û–±—ä—è—Å–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤—Ä–µ–º–µ–Ω–∞, –∞—Ä—Ç–∏–∫–ª–∏ –∏ –¥—Ä—É–≥–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
        """
        
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.5
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

class HelpDialog:
    def __init__(self, page: ft.Page, chat_screen):
        self.page = page
        self.chat_screen = chat_screen
        self.help_system = HelpSystem()
        self.current_help_data = None
        
    async def show_help_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–∏"""
        if not self.chat_screen.messages or len(self.chat_screen.messages) <= 1:
            await self.show_info_dialog("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞")
            return False
            
        if (self.chat_screen.max_hints != float('inf') and 
            self.chat_screen.hint_count >= self.chat_screen.max_hints):
            await self.show_info_dialog("‚ö†Ô∏è –õ–∏–º–∏—Ç", 
                "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
            return False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–º–æ—â—å
        loading_dialog = self.create_loading_dialog()
        self.page.dialog = loading_dialog
        loading_dialog.open = True
        self.page.update()
        
        try:
            self.current_help_data = await self.help_system.generate_help_content(
                self.chat_screen.messages,
                self.chat_screen.scenario,
                self.chat_screen.difficulty
            )
            
            loading_dialog.open = False
            
            if self.current_help_data and "error" not in self.current_help_data:
                help_dialog = self.create_help_dialog()
                self.page.dialog = help_dialog
                help_dialog.open = True
                help_dialog.on_dismiss = lambda e: self.chat_screen._update_hints_display()
                self.page.update()
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫, –µ—Å–ª–∏ –ø–æ–º–æ—â—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ê –∏ –ü–û–ö–ê–ó–ê–ù–ê
                if self.chat_screen.max_hints != float('inf'):
                    self.chat_screen.hint_count += 1
                    
                return True
            else:
                await self.show_info_dialog("‚ùå –û—à–∏–±–∫–∞", 
                    self.current_help_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                return False
                
        except Exception as e:
            loading_dialog.open = False
            await self.show_info_dialog("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def create_loading_dialog(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏"""
        return ft.AlertDialog(
            title=ft.Text("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–º–æ—â–∏..."),
            content=ft.Container(
                content=ft.Column([
                    ft.ProgressRing(),
                    ft.Text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –∏ –≥–æ—Ç–æ–≤–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏...")
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                height=100
            ),
            modal=True
        )
    
    def create_help_dialog(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–∏"""
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80% —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 700px –∏ –Ω–µ –º–µ–Ω–µ–µ 500px)
        dialog_width = min(max(self.page.width * 0.8 if self.page.width else 600, 500), 700)

        # –ü–µ—Ä–µ–≤–æ–¥
        translation_text = ft.Text(
            self.current_help_data.get("translation", "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"),
            size=16,
            color="#2E7D32",
            weight=ft.FontWeight.W_500
        )
        
        translation_container = ft.Container(
            content=ft.Column([
                ft.Text("üî§ –ü–µ—Ä–µ–≤–æ–¥:", size=18, weight=ft.FontWeight.BOLD),
                translation_text
            ]),
            bgcolor="#E8F5E8",
            border_radius=10,
            padding=ft.padding.all(15),
            margin=ft.margin.only(bottom=15)
        )
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        answer_buttons = []
        for i, answer in enumerate(self.current_help_data.get("answer_options", [])[:3], 1):
            button = ft.Container(
                content=ft.Text(
                    f"{i}. {answer}",
                    size=14,
                    color=ft.Colors.WHITE,
                    text_align=ft.TextAlign.LEFT
                ),
                bgcolor="#25D366",
                border_radius=8,
                padding=ft.padding.all(12),
                margin=ft.margin.only(bottom=8),
                ink=True,
                on_click=lambda e, ans=answer: self.send_answer_to_chat(ans)
            )
            answer_buttons.append(button)
        
        answers_container = ft.Container(
            content=ft.Column([
                ft.Text("üí¨ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:", size=18, weight=ft.FontWeight.BOLD),
                ft.Column(answer_buttons)
            ]),
            bgcolor="#E3F2FD",
            border_radius=10,
            padding=ft.padding.all(15),
            margin=ft.margin.only(bottom=15)
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        cultural_btn = ft.ElevatedButton(
            "üåç –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
            bgcolor="#FF9800",
            color=ft.Colors.WHITE,
            on_click=self.show_cultural_context
        )
        
        grammar_btn = ft.ElevatedButton(
            "üìö –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            bgcolor="#9C27B0",
            color=ft.Colors.WHITE,
            on_click=self.show_grammar_analysis
        )
        
        assistant_btn = ft.ElevatedButton(
            "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ü–æ–º–æ—â–Ω–∏–∫–∞",
            bgcolor="#2196F3",
            color=ft.Colors.WHITE,
            on_click=self.show_assistant_dialog
        )
        
        action_buttons = ft.Row([
            cultural_btn,
            grammar_btn,
            assistant_btn
        ], alignment=ft.MainAxisAlignment.SPACE_AROUND)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_column_content = ft.Column(
            [
                translation_container,
                answers_container,
                ft.Container(height=10), # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
                ft.Row(
                    [cultural_btn, grammar_btn], 
                    alignment=ft.MainAxisAlignment.SPACE_AROUND, # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    # –î–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è
                    wrap=True, 
                    spacing=10 # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–Ω–µ—Å—É—Ç—Å—è
                ),
                ft.Container(height=20), # –û—Ç—Å—Ç—É–ø –ø–æ–±–æ–ª—å—à–µ
                assistant_btn # –ö–Ω–æ–ø–∫–∞ "–°–ø—Ä–æ—Å–∏—Ç—å –ü–æ–º–æ—â–Ω–∏–∫–∞" –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π, –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
            ],
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
            scroll=ft.ScrollMode.ADAPTIVE,
            # –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
            # –ù–∞–ø—Ä–∏–º–µ—Ä, 70% –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            height=self.page.height * 0.7 if self.page.height else 450 
        )

        return ft.AlertDialog(
            modal=True,
            title=ft.Row([
                ft.Icon(ft.icons.LIGHTBULB_OUTLINE, color="#FFC107"),
                ft.Text("üí° –ü–æ–º–æ—â—å", weight=ft.FontWeight.BOLD)
            ]),
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º main_column_content –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
            content=ft.Container(content=main_column_content, width=dialog_width),
            actions=[
                ft.TextButton("–ó–∞–∫—Ä—ã—Ç—å", on_click=self.close_help_dialog, style=ft.ButtonStyle(color=ft.colors.RED_ACCENT_700))
            ],
            actions_alignment=ft.MainAxisAlignment.END,
            shape=ft.RoundedRectangleBorder(radius=15),
            content_padding=ft.padding.all(20),
            title_padding=ft.padding.only(left=20, top=20, right=20, bottom=10),
            actions_padding=ft.padding.only(right=20, bottom=10)
        )
    
    def send_answer_to_chat(self, answer):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç"""
        self.close_help_dialog(None)
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        self.chat_screen.message_input.value = answer
        asyncio.create_task(self.chat_screen.send_message(None))
    
    async def show_cultural_context(self, e):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        last_ai_message = ""
        for msg in reversed(self.chat_screen.messages):
            if msg["role"] == "assistant":
                last_ai_message = msg["content"]
                break
        
        if not last_ai_message:
            await self.show_info_dialog("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        loading = self.create_loading_dialog()
        self.page.dialog = loading
        loading.open = True
        self.page.update()
        
        try:
            context = await self.help_system.generate_cultural_context(
                last_ai_message, 
                self.chat_screen.scenario, 
                self.chat_screen.difficulty
            )
            loading.open = False
            await self.show_info_dialog("üåç –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", context)
        except Exception as ex:
            loading.open = False
            await self.show_info_dialog("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {ex}")
    
    async def show_grammar_analysis(self, e):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        last_ai_message = ""
        for msg in reversed(self.chat_screen.messages):
            if msg["role"] == "assistant":
                last_ai_message = msg["content"]
                break
        
        if not last_ai_message:
            await self.show_info_dialog("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        loading = self.create_loading_dialog()
        self.page.dialog = loading
        loading.open = True
        self.page.update()
        
        try:
            analysis = await self.help_system.generate_grammar_analysis(
                last_ai_message, 
                self.chat_screen.scenario, 
                self.chat_screen.difficulty
            )
            loading.open = False
            await self.show_info_dialog("üìö –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", analysis)
        except Exception as ex:
            loading.open = False
            await self.show_info_dialog("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {ex}")
    
    def show_assistant_dialog(self, e):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        question_field = ft.TextField(
            hint_text="–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–º–æ—â–Ω–∏–∫—É...",
            multiline=True,
            min_lines=3,
            max_lines=5,
            border_radius=10
        )
        
        async def ask_assistant(e):
            question = question_field.value.strip()
            if not question:
                return
            
            loading = self.create_loading_dialog()
            self.page.dialog = loading
            loading.open = True
            self.page.update()
            
            try:
                prompt = f"""
                –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. 
                –ö–æ–Ω—Ç–µ–∫—Å—Ç: {self.chat_screen.scenario}
                –°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.chat_screen.difficulty}
                
                –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}
                
                –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                """
                
                response = await asyncio.to_thread(
                    self.help_system.client.chat.completions.create,
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7
                )
                
                answer = response.choices[0].message.content
                loading.open = False
                await self.show_info_dialog("ü§ñ –û—Ç–≤–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞", answer)
                
            except Exception as ex:
                loading.open = False
                await self.show_info_dialog("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {ex}")
        
        assistant_dialog = ft.AlertDialog(
            title=ft.Text("ü§ñ –ü–æ–º–æ—â–Ω–∏–∫", size=18, weight=ft.FontWeight.BOLD),
            content=ft.Container(
                content=ft.Column([
                    ft.Text("–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–∏–∞–ª–æ–≥—É:"),
                    question_field
                ]),
                width=400,
                height=200
            ),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda _: self.close_dialog(assistant_dialog)),
                ft.ElevatedButton("–°–ø—Ä–æ—Å–∏—Ç—å", on_click=ask_assistant)
            ]
        )
        
        self.page.dialog = assistant_dialog
        assistant_dialog.open = True
        self.page.update()
    
    async def show_info_dialog(self, title, content):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        info_dialog = ft.AlertDialog(
            title=ft.Text(title),
            content=ft.Text(content, selectable=True),
            actions=[ft.TextButton("OK", on_click=lambda _: self.close_dialog(info_dialog))]
        )
        self.page.dialog = info_dialog
        info_dialog.open = True
        self.page.update()
    
    def close_help_dialog(self, e):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–∏"""
        if self.page.dialog:
            self.page.dialog.open = False
            self.page.update()
    
    def close_dialog(self, dialog):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        dialog.open = False
        self.page.update() 