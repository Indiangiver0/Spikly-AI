import os
import json
import datetime
import uuid # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
from typing import Dict, List, Any
import asyncio # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å OpenAI
from openai import OpenAI # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ OpenAI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

class DialogManager:
    def __init__(self, client: OpenAI = None): # –ü—Ä–∏–Ω–∏–º–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        self.logs_dir = "dialog_logs"
        self.user_errors_raw_file = os.path.join(self.logs_dir, "user_errors_raw.json")
        self.user_error_profile_file = os.path.join(self.logs_dir, "user_error_profile.json")
        self.user_coins_file = os.path.join(self.logs_dir, "user_coins.json")  # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –º–æ–Ω–µ—Ç
        self.ensure_logs_directory()
        self.ensure_log_files()
        self.client = client # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        
    def ensure_logs_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.logs_dir):
            os.makedirs(self.logs_dir)
            
    def ensure_log_files(self):
        """–°–æ–∑–¥–∞–µ—Ç JSON —Ñ–∞–π–ª—ã –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
        for file_path in [self.user_errors_raw_file, self.user_error_profile_file]:
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump([], f) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º, user_error_profile –ª—É—á—à–µ {} –µ—Å–ª–∏ —ç—Ç–æ –±—É–¥–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Ñ–∏–ª–µ–π
                    # –ò—Å–ø—Ä–∞–≤–∏–º user_error_profile.json –Ω–∞ {} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                    if file_path == self.user_error_profile_file:
                        f.seek(0)
                        json.dump({}, f)
                print(f"Created log file: {file_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –º–æ–Ω–µ—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(self.user_coins_file):
            with open(self.user_coins_file, 'w', encoding='utf-8') as f:
                json.dump({"coins": 0, "total_earned": 0, "last_updated": datetime.datetime.now().isoformat()}, f)
            print(f"Created coins file: {self.user_coins_file}")
    
    def get_user_coins(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(self.user_coins_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get("coins", 0)
        except Exception as e:
            print(f"Error loading user coins: {e}")
            return 0
    
    def add_coins(self, amount: int, reason: str = "exercise_completed") -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
        try:
            current_data = {"coins": 0, "total_earned": 0}
            if os.path.exists(self.user_coins_file):
                with open(self.user_coins_file, 'r', encoding='utf-8') as f:
                    current_data = json.load(f)
            
            current_data["coins"] += amount
            current_data["total_earned"] = current_data.get("total_earned", 0) + amount
            current_data["last_updated"] = datetime.datetime.now().isoformat()
            current_data["last_reason"] = reason
            
            with open(self.user_coins_file, 'w', encoding='utf-8') as f:
                json.dump(current_data, f, ensure_ascii=False, indent=2)
            
            print(f"üí∞ Added {amount} coins for '{reason}'. Total: {current_data['coins']}")
            return current_data["coins"]
            
        except Exception as e:
            print(f"Error adding coins: {e}")
            return self.get_user_coins()
    
    def get_coins_data(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(self.user_coins_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading coins data: {e}")
            return {"coins": 0, "total_earned": 0}
            
    def generate_dialog_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–∏–∞–ª–æ–≥–∞."""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º ID –¥–ª—è save_dialog,
        # ID –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç ChatScreen. –û—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
        return str(uuid.uuid4())

    def save_dialog(self, dialog_id: str, scenario: str, difficulty: str, messages: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º ID –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∏–∞–ª–æ–≥–∞."""
        # dialog_id —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        timestamp_dt = datetime.datetime.now()
        timestamp_str_file = timestamp_dt.strftime("%Y%m%d_%H%M%S")
        timestamp_iso = timestamp_dt.isoformat()
        
        filename = f"dialog_{timestamp_str_file}_{dialog_id}.json"
        filepath = os.path.join(self.logs_dir, filename)
        
        dialog_data = {
            "dialog_id": dialog_id, 
            "timestamp_iso": timestamp_iso,
            "scenario": scenario,
            "difficulty": difficulty,
            "messages": messages,
            "message_count": len(messages) - 1,  # –∏—Å–∫–ª—é—á–∞–µ–º system message
            "duration_minutes": None  # TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(dialog_data, f, ensure_ascii=False, indent=2)
            
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
        self.cleanup_old_dialogs()
        
    def cleanup_old_dialogs(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3"""
        dialog_files = []
        for filename in os.listdir(self.logs_dir):
            if filename.startswith("dialog_") and filename.endswith(".json"):
                filepath = os.path.join(self.logs_dir, filename)
                dialog_files.append((filepath, os.path.getctime(filepath)))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        dialog_files.sort(key=lambda x: x[1], reverse=True)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 3-—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        for filepath, _ in dialog_files[3:]:
            try:
                os.remove(filepath)
                print(f"Deleted old dialog: {os.path.basename(filepath)}")
            except Exception as e:
                print(f"Error deleting dialog {filepath}: {e}")
                
    def save_error(self, error_type: str, error_message: str, context: Dict = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–ª–∏ API –æ—à–∏–±–∫—É –≤ –æ–±—â–∏–π —Ñ–∞–π–ª –æ—à–∏–±–æ–∫"""
        errors_file = os.path.join(self.logs_dir, "errors.json")
        
        error_entry = {
            "timestamp": datetime.datetime.now().isoformat(),
            "type": error_type,
            "message": error_message,
            "context": context or {}
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        errors = []
        if os.path.exists(errors_file):
            try:
                with open(errors_file, 'r', encoding='utf-8') as f:
                    errors = json.load(f)
            except Exception as e:
                print(f"Error loading errors file: {e}")
                errors = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
        errors.append(error_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(errors_file, 'w', encoding='utf-8') as f:
            json.dump(errors, f, ensure_ascii=False, indent=2)
            
    def log_raw_user_error(self, dialog_id: str, user_message_text: str, detected_error_type: str, raw_error_details: Any, context: Dict = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç "—Å—ã—Ä—É—é" –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—É—é –¥–æ –∞–Ω–∞–ª–∏–∑–∞ AI."""
        error_entry = {
            "timestamp": datetime.datetime.now().isoformat(),
            "dialog_id": dialog_id,
            "user_message": user_message_text,
            "error_type": detected_error_type, # e.g., "russian_word", "profanity", "potential_typo"
            "details": raw_error_details, # e.g., the specific word or phrase
            "context": context or {}
        }
        
        raw_errors = []
        if os.path.exists(self.user_errors_raw_file):
            try:
                with open(self.user_errors_raw_file, 'r', encoding='utf-8') as f:
                    raw_errors = json.load(f)
            except json.JSONDecodeError:
                print(f"Warning: {self.user_errors_raw_file} is corrupted or not valid JSON. Initializing as empty list.")
                raw_errors = []
            except Exception as e:
                print(f"Error loading {self.user_errors_raw_file}: {e}")
                raw_errors = [] # Fallback to empty list
        
        raw_errors.append(error_entry)
        
        try:
            with open(self.user_errors_raw_file, 'w', encoding='utf-8') as f:
                json.dump(raw_errors, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error writing to {self.user_errors_raw_file}: {e}")

    def save_help_request(self, dialog_id: str, request_type: str, user_input: str, ai_response: str, context: Dict = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–º–æ—â–∏: –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"""
        help_file = os.path.join(self.logs_dir, "help_requests.json")
        
        entry_context = context or {}
        entry_context['dialog_id'] = dialog_id # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –¥–∏–∞–ª–æ–≥–∞ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

        help_entry = {
            "timestamp": datetime.datetime.now().isoformat(),
            "dialog_id": dialog_id, # –Ø–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è ID –¥–∏–∞–ª–æ–≥–∞
            "type": request_type,  # "translation", "cultural", "answer_options", "assistant_question"
            "user_input": user_input,
            "ai_response": ai_response,
            "context": entry_context # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        help_requests = []
        if os.path.exists(help_file):
            try:
                with open(help_file, 'r', encoding='utf-8') as f:
                    help_requests = json.load(f)
            except Exception as e:
                print(f"Error loading help requests file: {e}")
                help_requests = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        help_requests.append(help_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(help_file, 'w', encoding='utf-8') as f:
            json.dump(help_requests, f, ensure_ascii=False, indent=2)
            
    def save_aggressive_language_incident(self, dialog_id: str, user_message: str, detected_keywords: List[str], role_reaction: str, scenario: str, difficulty: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        incidents_file = os.path.join(self.logs_dir, "aggressive_incidents.json")
        
        incident_entry = {
            "timestamp": datetime.datetime.now().isoformat(),
            "dialog_id": dialog_id, # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–∏–∞–ª–æ–≥–∞
            "user_message": user_message,
            "detected_keywords": detected_keywords,
            "role_reaction": role_reaction, # –ö–∞–∫ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∞ —Ä–æ–ª—å –ò–ò
            "scenario": scenario,
            "difficulty": difficulty
        }
        
        incidents = []
        if os.path.exists(incidents_file):
            try:
                with open(incidents_file, 'r', encoding='utf-8') as f:
                    incidents = json.load(f)
            except Exception as e:
                print(f"Error loading aggressive_incidents.json: {e}")
                incidents = []
        
        incidents.append(incident_entry)
        
        with open(incidents_file, 'w', encoding='utf-8') as f:
            json.dump(incidents, f, ensure_ascii=False, indent=2)
            
    def get_dialog_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∞–ª–æ–≥–∞–º"""
        stats = {
            "total_dialogs": 0,
            "total_errors": 0,
            "total_help_requests": 0,
            "scenarios_used": {},
            "difficulty_distribution": {}
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤
        for filename in os.listdir(self.logs_dir):
            if filename.startswith("dialog_") and filename.endswith(".json"):
                stats["total_dialogs"] += 1
                try:
                    with open(os.path.join(self.logs_dir, filename), 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        scenario = data.get("scenario", "unknown")
                        difficulty = data.get("difficulty", "unknown")
                        stats["scenarios_used"][scenario] = stats["scenarios_used"].get(scenario, 0) + 1
                        stats["difficulty_distribution"][difficulty] = stats["difficulty_distribution"].get(difficulty, 0) + 1
                except Exception as e:
                    print(f"Error reading dialog {filename}: {e}")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        errors_file = os.path.join(self.logs_dir, "errors.json")
        if os.path.exists(errors_file):
            try:
                with open(errors_file, 'r', encoding='utf-8') as f:
                    errors = json.load(f)
                    stats["total_errors"] = len(errors)
            except Exception:
                pass
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏
        help_file = os.path.join(self.logs_dir, "help_requests.json")
        if os.path.exists(help_file):
            try:
                with open(help_file, 'r', encoding='utf-8') as f:
                    help_requests = json.load(f)
                    stats["total_help_requests"] = len(help_requests)
            except Exception:
                pass
                
        return stats
    
    def get_error_summary_for_exercises(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        errors_file = os.path.join(self.logs_dir, "errors.json")
        
        if not os.path.exists(errors_file):
            return {"error_themes": [], "recommendations": [], "total_errors": 0}
        
        try:
            with open(errors_file, 'r', encoding='utf-8') as f:
                errors = json.load(f)
            
            error_themes = []
            recommendations = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            dialog_errors = [e for e in errors if e.get("type") == "dialog_error_summary"]
            
            for error in dialog_errors[-5:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–∏–∞–ª–æ–≥–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
                content = error.get("message", "")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
                if "–¢–ï–ú–´_–î–õ–Ø_–ó–ê–î–ê–ù–ò–ô:" in content:
                    themes_section = content.split("–¢–ï–ú–´_–î–õ–Ø_–ó–ê–î–ê–ù–ò–ô:")[1].strip()
                    error_themes.append(themes_section)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:" in content:
                    recommendations_section = content.split("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")[1]
                    if "–¢–ï–ú–´_–î–õ–Ø_–ó–ê–î–ê–ù–ò–ô:" in recommendations_section:
                        recommendations_section = recommendations_section.split("–¢–ï–ú–´_–î–õ–Ø_–ó–ê–î–ê–ù–ò–ô:")[0]
                    recommendations.append(recommendations_section.strip())
            
            return {
                "error_themes": error_themes,
                "recommendations": recommendations,
                "total_errors": len(dialog_errors),
                "recent_errors": dialog_errors[-3:] if dialog_errors else []
            }
            
        except Exception as e:
            print(f"Error analyzing errors for exercises: {e}")
            return {"error_themes": [], "recommendations": [], "total_errors": 0} 

    async def analyze_and_save_detailed_user_errors(self, dialog_id: str, user_message_text: str, full_dialog_history: List[Dict]):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é OpenAI –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫
        –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ user_error_profile.json.
        """
        if not self.client:
            print("OpenAI client not set in DialogManager. Cannot analyze detailed errors.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è OpenAI
        dialog_context_for_prompt = ""
        for msg in full_dialog_history[-5:]: # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            role = "User" if msg["role"] == "user" else "Assistant"
            dialog_context_for_prompt += f"{role}: {msg['content']}\\n"

        error_analysis_prompt = f"""
        –¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –ü–û–°–õ–ï–î–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.
        –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.

        –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è):
        {dialog_context_for_prompt}
        –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: "{user_message_text}"

        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã—è–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        1.  –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–ª–∞–≥–æ–ª–∞, –∞—Ä—Ç–∏–∫–ª–∏, –ø—Ä–µ–¥–ª–æ–≥–∏, –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω –∏ —Ç.–¥.).
        2.  –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Å–º–µ—à–µ–Ω–∏–µ —Å–ª–æ–≤).
        3.  –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ—É–∫–ª—é–∂–∏–µ —Ñ—Ä–∞–∑—ã, —Ç–∞–≤—Ç–æ–ª–æ–≥–∏—è).
        4.  –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–æ–ø–µ—á–∞—Ç–∫–∏).
        5.  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è, –≥–¥–µ —ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ, —Å—á–∏—Ç–∞–π —ç—Ç–æ –æ—à–∏–±–∫–æ–π).
        6.  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ (–º–∞—Ç—ã, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è).

        –î–ª—è –ö–ê–ñ–î–û–ô –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ–±—ä–µ–∫—Ç–∞:
        {{
            "original_phrase": "—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—à–∏–±–∫–æ–π",
            "error_type": "—Å—Ç—Ä–æ–∫–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'verb_tense', 'spelling', 'word_choice', 'russian_word_inappropriate', 'profanity', 'article_error', 'preposition_error')",
            "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
            "correction": "–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
        }}

        –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ [].
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ JSON –æ–±—ä–µ–∫—Ç–æ–≤. –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç - —ç—Ç–æ –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞.
        –ü—Ä–∏–º–µ—Ä:
        [
            {{
                "original_phrase": "I has a cat",
                "error_type": "verb_tense",
                "explanation": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ –≥–ª–∞–≥–æ–ª–∞ 'to have' –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è 'I'. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'have'.",
                "correction": "I have a cat"
            }},
            {{
                "original_phrase": "My freind",
                "error_type": "spelling",
                "explanation": "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª–æ–≤–µ 'friend'.",
                "correction": "My friend"
            }}
        ]
        """

        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo", # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4 –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                messages=[
                    {"role": "system", "content": "You are an expert English language error detection assistant. Provide output ONLY in JSON format as a list of error objects, or an empty list if no errors are found."},
                    {"role": "user", "content": error_analysis_prompt}
                ],
                temperature=0.2, # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                response_format={"type": "json_object"} # –ó–∞–ø—Ä–æ—Å JSON –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
            )
            
            ai_response_content = response.choices[0].message.content
            detected_errors = json.loads(ai_response_content) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç—Ä–æ–∫—É JSON

            if not isinstance(detected_errors, list): # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∞–º –æ–±—ä–µ–∫—Ç {"errors": [...]})
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–ª—é—á–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–ª–∏ –æ–±–µ—Ä–Ω—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫
                if isinstance(detected_errors, dict) and "errors" in detected_errors and isinstance(detected_errors["errors"], list):
                    detected_errors = detected_errors["errors"]
                else: # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤—Å–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                    print(f"Warning: OpenAI returned unexpected format for error analysis: {ai_response_content}")
                    detected_errors = []


        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from OpenAI error analysis: {e}")
            print(f"OpenAI response content: {ai_response_content}")
            detected_errors = []
        except Exception as e:
            print(f"Error calling OpenAI for error analysis: {e}")
            detected_errors = []

        if not detected_errors:
            return # –ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ user_error_profile.json
        error_profile = {}
        if os.path.exists(self.user_error_profile_file):
            try:
                with open(self.user_error_profile_file, 'r', encoding='utf-8') as f:
                    error_profile = json.load(f)
            except json.JSONDecodeError:
                print(f"Warning: {self.user_error_profile_file} is corrupted. Initializing new profile.")
                error_profile = {}
        
        current_timestamp = datetime.datetime.now().isoformat()

        for error_data in detected_errors:
            if not all(k in error_data for k in ["original_phrase", "error_type", "explanation", "correction"]):
                print(f"Skipping malformed error data from OpenAI: {error_data}")
                continue

            # –ö–ª—é—á –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ + —Ç–∏–ø –æ—à–∏–±–∫–∏
            # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –¥–ª—è –ª—É—á—à–µ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            error_key_base = error_data["original_phrase"].lower().strip().replace(" ", "_")
            error_key = f"{error_data['error_type']}_{error_key_base}"


            if error_key in error_profile:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—à–∏–±–∫—É
                error_profile[error_key]["count"] += 1
                error_profile[error_key]["last_seen_timestamp"] = current_timestamp
                error_profile[error_key]["last_seen_dialog_id"] = dialog_id
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–æ–≤—ã–µ –∏–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∫–æ–º)
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –Ω–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
                error_profile[error_key]["explanation"] = error_data["explanation"]
                error_profile[error_key]["correction"] = error_data["correction"]
                error_profile[error_key].setdefault("history", []).append({
                    "dialog_id": dialog_id,
                    "user_message": user_message_text, # –°–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—à–∏–±–∫–∞
                    "timestamp": current_timestamp
                })
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
                error_profile[error_key] = {
                    "original_phrase": error_data["original_phrase"],
                    "error_type": error_data["error_type"],
                    "explanation": error_data["explanation"],
                    "correction": error_data["correction"],
                    "count": 1,
                    "exercise_repetition_count": 6, # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ X6
                    "first_seen_timestamp": current_timestamp,
                    "last_seen_timestamp": current_timestamp,
                    "first_seen_dialog_id": dialog_id,
                    "last_seen_dialog_id": dialog_id,
                    "history": [{
                        "dialog_id": dialog_id,
                        "user_message": user_message_text,
                        "timestamp": current_timestamp
                    }]
                }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        try:
            with open(self.user_error_profile_file, 'w', encoding='utf-8') as f:
                json.dump(error_profile, f, ensure_ascii=False, indent=4)
            print(f"User error profile updated with {len(detected_errors)} errors from dialog {dialog_id}")
        except Exception as e:
            print(f"Error writing to {self.user_error_profile_file}: {e}")

    def set_openai_client(self, client: OpenAI):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä."""
        self.client = client

    def get_recent_dialogs(self, limit: int = 3) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
        """
        dialogs = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∏–∞–ª–æ–≥–æ–≤
        dialog_files = []
        for filename in os.listdir(self.logs_dir):
            if filename.startswith("dialog_") and filename.endswith(".json"):
                file_path = os.path.join(self.logs_dir, filename)
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                mod_time = os.path.getmtime(file_path)
                dialog_files.append((mod_time, file_path, filename))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        dialog_files.sort(reverse=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit –¥–∏–∞–ª–æ–≥–æ–≤
        for i, (mod_time, file_path, filename) in enumerate(dialog_files[:limit]):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    dialog_data = json.load(f)
                    dialogs.append(dialog_data)
                    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–∏–∞–ª–æ–≥: {filename} ({len(dialog_data.get('messages', []))} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞ {filename}: {e}")
        
        print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return dialogs 