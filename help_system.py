import toga
from toga.style import Pack
from openai import OpenAI
import asyncio
from config import OPENAI_API_KEY
from dialog_manager import DialogManager

class HelpSystem:
    def __init__(self, client):
        self.client = client
        self.dialog_manager = DialogManager()
        
    async def generate_help_content(self, messages, scenario, difficulty):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        last_ai_message_content = "–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç AI –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ—Ç."
        for i in range(len(messages) - 1, -1, -1):
            if messages[i]["role"] == "assistant":
                last_ai_message_content = messages[i]["content"]
                break

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è system prompt)
        recent_dialog_messages = []
        if len(messages) > 1: # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages[1:]: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ messages[0]
                role = "–í—ã" if msg["role"] == "user" else "AI"
                recent_dialog_messages.append(f"{role}: {msg['content']}")
        
        context_for_prompt = "\n".join(recent_dialog_messages[-4:]) # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ä–µ–ø–ª–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        
        help_prompt = f"""
        –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}
        –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty}
        –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞):
        {context_for_prompt}

        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫: "{last_ai_message_content}"
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
        
        –ü–ï–†–ï–í–û–î: [–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—ã—à–µ "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏". –ï—Å–ª–∏ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, —Ç–∞–∫ –∏ —É–∫–∞–∂–∏.]
        
        –í–ê–†–ò–ê–ù–¢–´_–û–¢–í–ï–¢–û–í:
        1. [–ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é AI –≤ –¥–∏–∞–ª–æ–≥–µ]
        2. [–°—Ä–µ–¥–Ω–∏–π –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é AI –≤ –¥–∏–∞–ª–æ–≥–µ]
        3. [–ë–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é AI –≤ –¥–∏–∞–ª–æ–≥–µ]
        
        –ö–£–õ–¨–¢–£–†–ù–´–ô_–ö–û–ù–¢–ï–ö–°–¢: [–ï—Å–ª–∏ –≤ –ü–û–°–õ–ï–î–ù–ï–ú –°–û–û–ë–©–ï–ù–ò–ò AI –∏–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞ –µ—Å—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Ç—Å—ã–ª–∫–∏, –∏–¥–∏–æ–º—ã –∏–ª–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã - –æ–±—ä—è—Å–Ω–∏ –∏—Ö. –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ - –Ω–∞–ø–∏—à–∏ "–ù–ï–¢"]
        
        –ì–†–ê–ú–ú–ê–¢–ò–ö–ê: [–ï—Å–ª–∏ –≤ –ü–û–°–õ–ï–î–ù–ï–ú –°–û–û–ë–©–ï–ù–ò–ò AI –µ—Å—Ç—å –≤–∞–∂–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è - –æ–±—ä—è—Å–Ω–∏ –∏—Ö. –ï—Å–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∏ –æ—á–µ–≤–∏–¥–Ω–∞—è - –Ω–∞–ø–∏—à–∏ "–ù–ï–¢"]
        
        –í–ê–ñ–ù–û: –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
        """
        
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": help_prompt}],
                temperature=0.7
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}"
    
    def parse_help_content(self, content):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        sections = {
            'translation': '',
            'answer_options': [],
            'cultural_context': '',
            'grammar': '',
            'show_cultural': True,
            'show_grammar': True
        }
        
        lines = content.split('\n')
        current_section = None
        
        for line in lines:
            line = line.strip()
            if line.startswith('–ü–ï–†–ï–í–û–î:'):
                current_section = 'translation'
                sections['translation'] = line.replace('–ü–ï–†–ï–í–û–î:', '').strip()
            elif line.startswith('–í–ê–†–ò–ê–ù–¢–´_–û–¢–í–ï–¢–û–í:'):
                current_section = 'answer_options'
            elif line.startswith('–ö–£–õ–¨–¢–£–†–ù–´–ô_–ö–û–ù–¢–ï–ö–°–¢:'):
                current_section = 'cultural_context'
                context_text = line.replace('–ö–£–õ–¨–¢–£–†–ù–´–ô_–ö–û–ù–¢–ï–ö–°–¢:', '').strip()
                sections['cultural_context'] = context_text
                sections['show_cultural'] = context_text.upper() != '–ù–ï–¢'
            elif line.startswith('–ì–†–ê–ú–ú–ê–¢–ò–ö–ê:'):
                current_section = 'grammar'
                grammar_text = line.replace('–ì–†–ê–ú–ú–ê–¢–ò–ö–ê:', '').strip()
                sections['grammar'] = grammar_text
                sections['show_grammar'] = grammar_text.upper() != '–ù–ï–¢'
            elif current_section == 'answer_options' and (line.startswith('1.') or line.startswith('2.') or line.startswith('3.')):
                sections['answer_options'].append(line[2:].strip())
        
        return sections


class HelpDialog:
    def __init__(self, parent_app, chat_screen):
        self.parent_app = parent_app
        self.chat_screen = chat_screen
        self.help_system = HelpSystem(chat_screen.client)
        self.original_content = None
        self.current_help_data = None
        self._cached_help_content = None
        self._cached_for_messages_hash = None
        self.was_new_content_generated = False
        
    async def show_help_dialog(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."""
        print("Attempting to show help dialog...")
        self.was_new_content_generated = False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        current_messages_str = "".join([msg['content'] for msg in self.chat_screen.messages])
        current_messages_hash = hash(current_messages_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à
        if self._cached_help_content and self._cached_for_messages_hash == current_messages_hash:
            print("Using cached help content.")
            parsed_help = self.help_system.parse_help_content(self._cached_help_content)
            self.current_help_data = parsed_help
        else:
            print("Generating new help content...")
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
            help_content = await self.help_system.generate_help_content(
                self.chat_screen.messages,
                self.chat_screen.scenario,
                self.chat_screen.difficulty
            )
            if "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏:" in help_content:
                self.parent_app.main_window.error_dialog("–û—à–∏–±–∫–∞ –ü–æ–º–æ—â–∏", help_content)
                return False
            
            print(f"Generated help content: {help_content[:100]}...")
            
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            self._cached_help_content = help_content
            self._cached_for_messages_hash = current_messages_hash
            self.was_new_content_generated = True
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            parsed_help = self.help_system.parse_help_content(help_content)
            self.current_help_data = parsed_help
        
        print(f"Parsed help: {parsed_help}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
        self.help_system.dialog_manager.save_help_request(
            "answer_options", 
            "Requested help with answer options", 
            str(parsed_help['answer_options']),
            {"scenario": self.chat_screen.scenario, "difficulty": self.chat_screen.difficulty}
        )
        
        # –°–æ–∑–¥–∞–µ–º UI –¥–∏–∞–ª–æ–≥–∞
        self.create_help_ui(parsed_help)
        return True
    
    def create_help_ui(self, help_data):
        """–°–æ–∑–¥–∞–µ—Ç UI –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        print("Creating help UI...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.original_content = self.parent_app.main_window.content
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —á–∞—Ç—É
        back_to_chat_button = toga.Button(
            "‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É",
            on_press=self.back_to_chat,
            style=Pack(padding=10, background_color="#dc3545", color="#ffffff")
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = toga.Label(
            "üí° –ü–æ–º–æ—â—å –ø–æ –¥–∏–∞–ª–æ–≥—É",
            style=Pack(font_size=18, font_weight="bold", padding=(10, 0, 20, 0))
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥
        translation_text = toga.Label(
            f"üî§ –ü–µ—Ä–µ–≤–æ–¥: {help_data.get('translation', '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞')}",
            style=Pack(padding=(0, 0, 15, 0))
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_children = [title, translation_text]
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if help_data.get('answer_options'):
            options_label = toga.Label(
                "üí° –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å):",
                style=Pack(font_weight="bold", padding=(0, 0, 10, 0))
            )
            content_children.append(options_label)
            
            for i, option in enumerate(help_data['answer_options'], 1):
                option_button = toga.Button(
                    f"{i}. {option}",
                    on_press=lambda widget, text=option: self.send_answer_option(text),
                    style=Pack(
                        padding=(5, 0),
                        background_color="#28a745",
                        color="#ffffff",
                        flex=1
                    )
                )
                content_children.append(option_button)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
        action_buttons_box_children = []

        if help_data.get('show_cultural', True):
            cultural_context_text = toga.Label(
                f"üåç –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {help_data.get('cultural_context', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}",
                style=Pack(padding=(15, 0, 10, 0))
            )
            content_children.append(cultural_context_text)
        else:
            show_cultural_button = toga.Button(
                "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                on_press=self.show_cultural_context,
                style=Pack(padding=(5,5), background_color="#17a2b8", color="#ffffff", flex=1)
            )
            action_buttons_box_children.append(show_cultural_button)

        if help_data.get('show_grammar', True):
            grammar_text = toga.Label(
                f"üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: {help_data.get('grammar', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}",
                style=Pack(padding=(10, 0, 20, 0))
            )
            content_children.append(grammar_text)
        else:
            show_grammar_button = toga.Button(
                "‚úçÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã",
                on_press=self.show_grammar_tips,
                style=Pack(padding=(5,5), background_color="#17a2b8", color="#ffffff", flex=1)
            )
            action_buttons_box_children.append(show_grammar_button)
        
        if action_buttons_box_children:
            action_buttons_box = toga.Box(
                children=action_buttons_box_children,
                style=Pack(direction="row" if len(action_buttons_box_children) > 1 else "column", padding=(10,0))
            )
            content_children.append(action_buttons_box)

        # –ö–Ω–æ–ø–∫–∞ "–°–ø—Ä–æ—Å–∏—Ç—å –ü–æ–º–æ—â–Ω–∏–∫–∞"
        ask_assistant_button = toga.Button(
            "üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –ü–æ–º–æ—â–Ω–∏–∫–∞",
            on_press=self.show_assistant_dialog, # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
            style=Pack(padding=(20, 0, 5, 0), background_color="#ffc107", color="#212529", font_weight="bold", flex=1)
        )
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–º–æ—â–∏
        close_help_button = toga.Button(
            "–ó–∞–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å",
            on_press=self.back_to_chat, # –ò—Å–ø–æ–ª—å–∑—É–µ–º back_to_chat –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            style=Pack(padding=(5,0,10,0), background_color="#6c757d", color="#ffffff", flex=1)
        )

        buttons_box = toga.Box(
            children=[ask_assistant_button, close_help_button],
            style=Pack(direction="row", padding=(0,0))
        )
        content_children.append(buttons_box)
        
        # ScrollContainer –¥–ª—è –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scroll_container = toga.ScrollContainer(
            content=toga.Box(
                children=content_children,
                style=Pack(direction="column", padding=20, flex=1)
            ),
            style=Pack(flex=1)
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–º–æ—â–∏
        help_box = toga.Box(
            children=[
                back_to_chat_button,
                scroll_container
            ],
            style=Pack(direction="column", flex=1)
        )
        
        self.parent_app.main_window.content = help_box
        print("Help UI created and set as main window content.")

    async def _ask_assistant_openai(self, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–º–æ—â–Ω–∏–∫—É OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
        dialog_history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in self.chat_screen.messages])
        
        prompt = f"""
        –¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ç–µ–∫—É—â–∏–º –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

        –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
        –°–æ–±—ã—Ç–∏–µ –∏ —Ä–æ–ª—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: "{self.chat_screen.scenario}"
        –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞: {self.chat_screen.difficulty}

        –ò—Å—Ç–æ—Ä–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –º–æ–º–µ–Ω—Ç—É:
        {dialog_history}

        –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ–±–µ (–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É): "{question}"

        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –º–æ–∂–µ—à—å —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –æ—Ç–≤–µ—Ç–∞.
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
        """
        
        try:
            response = await asyncio.to_thread(
                self.help_system.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7
            )
            answer = response.choices[0].message.content
            self.help_system.dialog_manager.save_help_request(
                "assistant_question", 
                question, 
                answer, 
                {"scenario": self.chat_screen.scenario, "difficulty": self.chat_screen.difficulty, "dialog_history_length": len(self.chat_screen.messages)}
            )
            return answer
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ü–æ–º–æ—â–Ω–∏–∫—É: {e}"
            self.help_system.dialog_manager.save_error(
                "assistant_api_error", 
                str(e),
                {"scenario": self.chat_screen.scenario, "difficulty": self.chat_screen.difficulty, "question": question}
            )
            return error_message

    async def handle_ask_assistant(self, widget):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–º–æ—â–Ω–∏–∫—É."""
        question = self.assistant_input.value.strip()
        if not question:
            self.parent_app.main_window.info_dialog("–ü–æ–º–æ—â–Ω–∏–∫", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
            return

        self.assistant_input.value = "" # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.assistant_response_area.value = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ü–æ–º–æ—â–Ω–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        answer = await self._ask_assistant_openai(question)
        self.assistant_response_area.value = answer

    def show_cultural_context(self, widget):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ª—å—Ç—É—Ä–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        self.parent_app.main_window.info_dialog("–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_grammar_tips(self, widget):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        self.parent_app.main_window.info_dialog("–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_assistant_dialog(self, widget=None): # widget=None, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑—ã–≤–∞—Ç—å –±–µ–∑ sender
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç UI –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ü–æ–º–æ—â–Ω–∏–∫–æ–º."""
        print("Showing assistant dialog...")
        # self.original_content —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑ show_help_dialog
        
        back_to_help_button = toga.Button(
            "‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º",
            on_press=self.back_to_help,
            style=Pack(padding=10, background_color="#007bff", color="#ffffff")
        )

        title = toga.Label(
            "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ü–æ–º–æ—â–Ω–∏–∫—É",
            style=Pack(font_size=18, font_weight="bold", padding=(10,0,15,0))
        )

        instruction = toga.Label(
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø–æ–º–æ—á—å —Å –æ—Ç–≤–µ—Ç–æ–º.",
            style=Pack(padding=(0,0,15,0))
        )

        self.assistant_input = toga.TextInput(
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å...",
            style=Pack(padding=(0,0,10,0), height=80) # –£–≤–µ–ª–∏—á–∏–º –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Å–æ—Ç—É
        )

        ask_button = toga.Button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ü–æ–º–æ—â–Ω–∏–∫—É",
            on_press=self.handle_ask_assistant, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é async-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –æ–±–µ—Ä—Ç–∫—É
            style=Pack(padding=10, background_color="#28a745", color="#ffffff")
        )

        self.assistant_response_area = toga.MultilineTextInput(
            readonly=True,
            placeholder="–û—Ç–≤–µ—Ç –ü–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...",
            style=Pack(flex=1, padding=(10,0,0,0))
        )
        
        assistant_box_content = toga.Box(
            children=[
                title, 
                instruction, 
                self.assistant_input, 
                ask_button, 
                self.assistant_response_area
            ],
            style=Pack(direction="column", padding=20, flex=1)
        )

        assistant_scroll = toga.ScrollContainer(
            content=assistant_box_content,
            style=Pack(flex=1)
        )
        
        assistant_main_box = toga.Box(
            children=[back_to_help_button, assistant_scroll],
            style=Pack(direction="column", flex=1)
        )

        self.parent_app.main_window.content = assistant_main_box
        print("Assistant UI created and set.")

    def send_answer_option(self, answer_text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç"""
        print(f"Sending answer option: {answer_text}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        self.help_system.dialog_manager.save_help_request(
            "answer_used", 
            answer_text, 
            "User selected this answer option",
            {"scenario": self.chat_screen.scenario, "difficulty": self.chat_screen.difficulty}
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —á–∞—Ç—É
        self.back_to_chat(None)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.chat_screen.user_input.value = answer_text
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∫–æ—Ä—É—Ç–∏–Ω—ã
        import asyncio
        try:
            loop = asyncio.get_event_loop()
            loop.create_task(self.chat_screen.send_message(None))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.chat_screen.send_message(None))
            finally:
                loop.close()
    
    def back_to_help(self, widget):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–∫–Ω—É –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self.current_help_data:
            self.create_help_ui(self.current_help_data)
    
    def back_to_chat(self, widget):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —á–∞—Ç—É"""
        if self.original_content:
            self.parent_app.main_window.content = self.original_content
    
    def close_dialog(self, widget):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —á–∞—Ç—É"""
        self.back_to_chat(widget) 