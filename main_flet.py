import flet as ft
import asyncio
from openai import OpenAI
from config import OPENAI_API_KEY
from templates import templates
from dialog_manager import DialogManager
from language_filter import LanguageFilter
from prompts import get_system_prompt
from help_system_flet import HelpDialog

class EnglishLearningApp:
    def __init__(self, page: ft.Page):
        self.page = page
        self.client = OpenAI(api_key=OPENAI_API_KEY)
        self.dialog_manager = DialogManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page.title = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ü–µ–Ω–∫–∏"
        self.page.theme_mode = ft.ThemeMode.LIGHT
        self.page.window.width = 800
        self.page.window.height = 600
        self.page.window.resizable = True
        self.page.bgcolor = "#F5F5F5"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.current_screen = "start"
        self.chat_screen = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        self.show_start_screen()
    
    def show_start_screen(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        self.current_screen = "start"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ft.Text(
            "üé≠ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ü–µ–Ω–∫–∏",
            size=36,
            weight=ft.FontWeight.BOLD,
            color="#2E7D32",
            text_align=ft.TextAlign.CENTER
        )
        
        subtitle = ft.Text(
            "–ò–∑—É—á–∞–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            size=18,
            color="#666",
            text_align=ft.TextAlign.CENTER
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_label = ft.Text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:", size=20, weight=ft.FontWeight.W_500)
        
        scenario_options = []
        for key, value in templates.items():
            scenario_options.append(ft.dropdown.Option(
                key=str(key),
                text=f"{key}. {value['description']}"
            ))
        
        self.scenario_dropdown = ft.Dropdown(
            options=scenario_options,
            hint_text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞...",
            bgcolor=ft.Colors.WHITE,
            border_color="#E0E0E0",
            border_radius=15,
            content_padding=ft.padding.all(18),
            text_size=16,
            on_change=self.on_selection_change
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_label = ft.Text("‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", size=20, weight=ft.FontWeight.W_500)
        
        difficulty_options = [
            ft.dropdown.Option("easy", "üü¢ Easy (B1-B2) - –ü—Ä–æ—Å—Ç–∞—è –ª–µ–∫—Å–∏–∫–∞, –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
            ft.dropdown.Option("medium", "üü° Medium (B2-C1) - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å, 10-15 –ø–æ–¥—Å–∫–∞–∑–æ–∫"), 
            ft.dropdown.Option("hard", "üî¥ Hard (C1-C2) - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å, 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫")
        ]
        
        self.difficulty_dropdown = ft.Dropdown(
            options=difficulty_options,
            hint_text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...",
            bgcolor=ft.Colors.WHITE,
            border_color="#E0E0E0",
            border_radius=15,
            content_padding=ft.padding.all(18),
            text_size=16,
            on_change=self.on_selection_change
        )
        
        # üöÄ –£–ú–ù–ê–Ø –ö–ù–û–ü–ö–ê –°–¢–ê–†–¢ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.start_button = ft.ElevatedButton(
            content=ft.Text(
                "üöÄ –ù–ê–ß–ê–¢–¨ –î–ò–ê–õ–û–ì",
                size=20,
                weight=ft.FontWeight.BOLD,
                color=ft.Colors.WHITE,
                text_align=ft.TextAlign.CENTER
            ),
            bgcolor="#CCCCCC",  # –°–µ—Ä–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
            disabled=True,
            on_click=None,  # –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=25),
                padding=ft.padding.symmetric(horizontal=40, vertical=25),
                animation_duration=300,
                shadow_color=ft.Colors.with_opacity(0.20, ft.Colors.BLACK),
                elevation=2
            ),
            width=350,
            height=80
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ —Å–µ—Ä–æ–≥–æ –ø–æ–ª—è
        main_content = ft.Column([
            ft.Container(height=50),
            title,
            ft.Container(height=10),
            subtitle,
            ft.Container(height=60),
            scenario_label,
            ft.Container(height=15),
            self.scenario_dropdown,
            ft.Container(height=40),
            difficulty_label,
            ft.Container(height=15),
            self.difficulty_dropdown,
            ft.Container(height=50),
            self.start_button,
            ft.Container(height=50),
        ],
        alignment=ft.MainAxisAlignment.CENTER,
        horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ë–ï–ó —Å–µ—Ä–æ–≥–æ –ø–æ–ª—è
        self.page.controls.clear()
        self.page.add(main_content)
        self.page.update()
    
    def on_selection_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–æ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if self.scenario_dropdown.value and self.difficulty_dropdown.value:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É - –¥–µ–ª–∞–µ–º —è—Ä–∫–æ–π –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
            self.start_button.bgcolor = "#25D366"  # –Ø—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
            self.start_button.disabled = False  # –ú–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å
            self.start_button.on_click = self.start_dialog  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.start_button.style.shadow_color = ft.Colors.with_opacity(0.40, ft.Colors.BLACK)
            self.start_button.style.elevation = 8
        else:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É - –¥–µ–ª–∞–µ–º —Å–µ—Ä–æ–π
            self.start_button.bgcolor = "#CCCCCC"  # –°–µ—Ä–∞—è
            self.start_button.disabled = True  # –ù–µ –∫–ª–∏–∫–∞–µ—Ç—Å—è
            self.start_button.on_click = None  # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.start_button.style.shadow_color = ft.Colors.with_opacity(0.20, ft.Colors.BLACK)
            self.start_button.style.elevation = 2
        
        self.page.update()
    
    def start_dialog(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"""
        if not self.scenario_dropdown.value or not self.difficulty_dropdown.value:
            return  # –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        scenario_key = int(self.scenario_dropdown.value)
        selected_template = templates[scenario_key]
        scenario_text = selected_template["description"]
        difficulty = self.difficulty_dropdown.value
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞—Ç—É
        self.show_chat_screen(scenario_key, scenario_text, difficulty)
    
    def close_dialog(self, dialog):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
        dialog.open = False
        self.page.update()
    
    def show_chat_screen(self, scenario_key, scenario, difficulty):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —á–∞—Ç–∞"""
        self.current_screen = "chat"
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω —á–∞—Ç–∞
        self.chat_screen = ChatScreen(
            self.page, 
            self, 
            scenario_key, 
            scenario, 
            difficulty,
            self.client,
            self.dialog_manager
        )
        self.chat_screen.show()

class ChatScreen:
    def __init__(self, page: ft.Page, app, scenario_key, scenario, difficulty, client, dialog_manager):
        self.page = page
        self.app = app
        self.scenario_key = scenario_key
        self.scenario = scenario
        self.difficulty = difficulty
        self.client = client
        self.dialog_manager = dialog_manager
        self.language_filter = LanguageFilter()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        self.messages = []
        self.hint_count = 0
        self.max_hints = self.get_max_hints()
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.chat_container = None
        self.message_input = None
        self.hints_display = ft.Text(weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE) # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏
        self.help_dialog = HelpDialog(self.page, self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        self.setup_system_prompt()
    
    def get_max_hints(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        hints_map = {
            "easy": float('inf'),
            "medium": 15,
            "hard": 5
        }
        return hints_map.get(self.difficulty, 15)
    
    def setup_system_prompt(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        current_template_details = templates.get(self.scenario_key, {})
        aggression_response_for_role = current_template_details.get("aggression_response")

        system_content = get_system_prompt(
            scenario_description=self.scenario, 
            difficulty=self.difficulty,
            role_aggression_response=aggression_response_for_role
        )
        
        self.messages = [{"role": "system", "content": system_content}]
    
    def create_message_bubble(self, text, role):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—É–∑—ã—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è - –ù–ê–°–¢–û–Ø–©–ò–ô WhatsApp —Å—Ç–∏–ª—å!"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø—É–∑—ã—Ä—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70% —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞ –¥–ª—è –ø—É–∑—ã—Ä—è (margin_left, margin_right)
        # –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã (padding)
        bubble_max_width = self.page.window.width * 0.7 if self.page.window.width else 500 # –ó–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        if role == "user":
            bgcolor = "#075E54"
            text_color = ft.Colors.WHITE
            alignment = ft.MainAxisAlignment.END
            margin_left = 60
            margin_right = 10
        elif role == "assistant":
            bgcolor = ft.Colors.WHITE
            text_color = "#333333"
            alignment = ft.MainAxisAlignment.START
            margin_left = 10
            margin_right = 60
        else:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            bgcolor = "#FFE0B2"
            text_color = "#5D4037"
            alignment = ft.MainAxisAlignment.CENTER
            margin_left = 40
            margin_right = 40
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–∑—ã—Ä—å —Å –ù–ê–°–¢–û–Ø–©–ò–ú–ò –æ–∫—Ä—É–≥–ª—ã–º–∏ —É–≥–ª–∞–º–∏ –∏ —Ç–µ–Ω—è–º–∏!
        bubble = ft.Container(
            content=ft.Text(
                text,
                size=14,
                color=text_color,
                selectable=True
                # width —Ç—É—Ç –Ω–µ —Å—Ç–∞–≤–∏–º, –ø—É—Å—Ç—å Text —Å–∞–º –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Container-–∞
            ),
            bgcolor=bgcolor,
            border_radius=18,
            padding=ft.padding.symmetric(horizontal=16, vertical=12),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=3,
                color=ft.Colors.with_opacity(0.26, ft.Colors.BLACK),
                offset=ft.Offset(0, 1)
            ),
            animate=ft.animation.Animation(300, ft.AnimationCurve.EASE_OUT_CUBIC),
            margin=ft.margin.only(
                left=margin_left,
                right=margin_right,
                top=4,
                bottom=4
            ),
            width=bubble_max_width # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞-–ø—É–∑—ã—Ä—è
        )
        
        return ft.Row([bubble], alignment=alignment)
    
    def add_message_to_chat(self, text, role):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if self.chat_container:
            message_bubble = self.create_message_bubble(text, role)
            self.chat_container.controls.append(message_bubble)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            self.page.update()
            # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Column —Å scroll
    
    async def send_message(self, e):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_text = self.message_input.value.strip()
        if not user_text:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.add_message_to_chat(user_text, "user")
        self.message_input.value = ""
        self.page.update()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥
        if any(word in user_text.lower() for word in ["–≤—ã—Ö–æ–¥", "exit", "bye"]):
            self.add_message_to_chat("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏!", "system")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self.save_dialog_on_completion()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —è–∑—ã–∫
        if self.language_filter.is_aggressive(user_text):
            detected_keywords = self.language_filter.get_detected_keywords(user_text)
            role_keywords_present = False
            current_template = templates.get(self.scenario_key)
            if current_template and "keywords_for_reaction_check" in current_template:
                for r_keyword in current_template["keywords_for_reaction_check"]:
                    if r_keyword in user_text.lower():
                        role_keywords_present = True
                        break
            should_react_aggressively = role_keywords_present or (current_template and "keywords_for_reaction_check" not in current_template)

            if should_react_aggressively:
                aggression_response_text = templates.get(self.scenario_key, {}).get("aggression_response", "Please be respectful. I'm here to help you practice English.")
                self.add_message_to_chat(f"AI (System Reaction): {aggression_response_text}", "system")
                self.dialog_manager.save_aggressive_language_incident(
                    user_message=user_text,
                    detected_keywords=detected_keywords,
                    role_reaction=aggression_response_text,
                    scenario=self.scenario,
                    difficulty=self.difficulty
                )
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages.append({"role": "user", "content": user_text})
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=self.messages
            )
            
            answer = response.choices[0].message.content
            self.add_message_to_chat(answer, "assistant")
            self.messages.append({"role": "assistant", "content": answer})
            
        except Exception as ex:
            self.add_message_to_chat(f"–û—à–∏–±–∫–∞: {ex}", "error")
            self.dialog_manager.save_error("api_error", str(ex), {
                "scenario": self.scenario,
                "difficulty": self.difficulty,
                "user_message": user_text
            })
    
    def save_dialog_on_completion(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        if len(self.messages) > 1:  # –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ system
            self.dialog_manager.save_dialog(self.scenario, self.difficulty, self.messages)
            print(f"Dialog saved: {len(self.messages)} messages")
    
    def go_back(self, e):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        self.save_dialog_on_completion()
        self.app.show_start_screen()
        self.hint_count = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–∫–∞–∑–µ ChatScreen
    
    async def show_help(self, e):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–º–æ—â–∏"""
        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–º–æ—â—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ (–Ω–µ –æ—à–∏–±–∫–∞/–ª–∏–º–∏—Ç)
        # –≠—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ HelpDialog, –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await self.help_dialog.show_help_dialog()
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–º–æ—â–∏ (—á–µ—Ä–µ–∑ on_dismiss)

    def _update_hints_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥—Å–∫–∞–∑–æ–∫."""
        if self.max_hints == float('inf'):
            self.hints_display.value = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: ‚àû"
        else:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ self.hint_count –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç self.max_hints –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            remaining_hints = max(0, self.max_hints - self.hint_count)
            self.hints_display.value = f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: {remaining_hints}/{self.max_hints}"
        
        if self.page and self.hints_display.page: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
             self.page.update(self.hints_display) # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

    def show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —á–∞—Ç–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞
        self._update_hints_display()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ft.Container(
            content=ft.Row([
                ft.IconButton(
                    ft.icons.ARROW_BACK,
                    icon_color=ft.Colors.WHITE,
                    on_click=self.go_back,
                    tooltip="–ù–∞–∑–∞–¥"
                ),
                ft.Column([
                    ft.Text(
                        f"üìã {self.scenario}",
                        size=16,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE,
                        max_lines=2
                    ),
                    ft.Text(
                        f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.difficulty.upper()}",
                        size=12,
                        color=ft.Colors.with_opacity(0.70, ft.Colors.WHITE)
                    )
                ], spacing=2),
                ft.Container(expand=True), # –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –æ—Ç–æ–¥–≤–∏–≥–∞—è –∏–∫–æ–Ω–∫–∏ –≤–ø—Ä–∞–≤–æ
                self.hints_display, # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
                ft.Container(width=10), # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏
                ft.IconButton(
                    ft.icons.HELP_OUTLINE,
                    icon_color=ft.Colors.WHITE,
                    on_click=self.show_help,
                    # tooltip —É–±—Ä–∞–Ω –æ—Ç—Å—é–¥–∞, —Ç.–∫. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä—è–¥–æ–º
                )
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN, vertical_alignment=ft.CrossAxisAlignment.CENTER), # –î–æ–±–∞–≤–ª–µ–Ω–æ vertical_alignment
            bgcolor="#075E54",
            padding=ft.padding.all(15),
            border_radius=ft.border_radius.only(bottom_left=15, bottom_right=15)
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_container = ft.Column(
            controls=[],
            scroll=ft.ScrollMode.AUTO,
            auto_scroll=True,
            spacing=2
        )
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        chat_area = ft.Container(
            content=self.chat_container,
            bgcolor="#E5DDD5",  # –§–æ–Ω –∫–∞–∫ –≤ WhatsApp
            expand=True,
            padding=ft.padding.all(10),
            border_radius=10
        )
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_input = ft.TextField(
            hint_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
            border_color="#E0E0E0",
            border_radius=25,
            filled=True,
            bgcolor=ft.Colors.WHITE,
            content_padding=ft.padding.symmetric(horizontal=20, vertical=15),
            text_size=14,
            on_submit=self.send_message,
            expand=True
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_button = ft.Container(
            content=ft.Icon(ft.icons.SEND, color=ft.Colors.WHITE, size=24),
            bgcolor="#25D366",
            border_radius=25,
            width=50,
            height=50,
            ink=True,
            on_click=self.send_message,
            alignment=ft.alignment.center,
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=5,
                color=ft.Colors.with_opacity(0.26, ft.Colors.BLACK),
                offset=ft.Offset(0, 2)
            )
        )
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_row = ft.Row([
            self.message_input,
            ft.Container(width=10),
            send_button
        ], spacing=0)
        
        input_panel = ft.Container(
            content=input_row,
            bgcolor=ft.Colors.WHITE,
            padding=ft.padding.all(15),
            border_radius=ft.border_radius.only(top_left=15, top_right=15),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=10,
                color=ft.Colors.with_opacity(0.12, ft.Colors.BLACK),
                offset=ft.Offset(0, -2)
            )
        )
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞
        main_chat = ft.Column([
            header,
            chat_area,
            input_panel
        ], spacing=0, expand=True)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç
        self.page.controls.clear()
        self.page.add(main_chat)
        self.page.update()


def main(page: ft.Page):
    app = EnglishLearningApp(page)

if __name__ == '__main__':
    ft.app(target=main) 