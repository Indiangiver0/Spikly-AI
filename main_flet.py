import flet as ft
import asyncio
import uuid
from openai import OpenAI
from config import OPENAI_API_KEY
from templates import templates
from dialog_manager import DialogManager
from language_filter import LanguageFilter
from prompts import get_system_prompt
from help_system_flet import HelpDialog
from datetime import datetime
import os

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –≠—Ç–æ –Ω–µ —Å–∞–º—ã–π –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–±, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ —Ç–∞–∫.
# –í –∏–¥–µ–∞–ª–µ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å app —á–µ—Ä–µ–∑ page.session –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
global_app_instance = None

class EnglishLearningApp:
    def __init__(self, page: ft.Page):
        global global_app_instance
        global_app_instance = self
        self.page = page
        self.dialog_manager = DialogManager()
        
        # Initialize OpenAI client
        self.client = OpenAI(api_key=OPENAI_API_KEY)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        self.current_practice_session = None
        self.completed_exercises_count = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page.title = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ü–µ–Ω–∫–∏"
        self.page.theme_mode = ft.ThemeMode.LIGHT
        self.page.window.width = 800
        self.page.window.height = 600
        self.page.window.resizable = True
        self.page.bgcolor = "#F5F5F5"
        
        # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if hasattr(self.page.window, 'full_screen'):
             self.page.window.full_screen = True
        elif hasattr(self.page.window, 'maximized'):
             self.page.window.maximized = True
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.current_screen = "start"
        self.chat_screen = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        self.show_start_screen()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            if hasattr(self.page, 'window') and self.page.window:
                self.page.window.on_event = self.on_window_event
            else:
                print("‚ö†Ô∏è Window object not available, cleanup on close disabled")
        except Exception as e:
            print(f"‚ö†Ô∏è Could not set window event handler: {e}")
    
    def on_window_event(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ–∫–Ω–∞"""
        if e.data == "close":
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.cleanup_practice_files()
            print("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ñ–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏–∫ –æ—á–∏—â–µ–Ω—ã")
    
    def show_start_screen(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        self.current_screen = "start"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ft.Text(
            "üé≠ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ü–µ–Ω–∫–∏",
            size=36,
            weight=ft.FontWeight.BOLD,
            color="#2E7D32",
            text_align=ft.TextAlign.CENTER
        )
        
        subtitle = ft.Text(
            "–ò–∑—É—á–∞–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            size=18,
            color="#666",
            text_align=ft.TextAlign.CENTER
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_label = ft.Text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:", size=20, weight=ft.FontWeight.W_500)
        
        scenario_options = []
        for key, value in templates.items():
            scenario_options.append(ft.dropdown.Option(
                key=str(key),
                text=f"{key}. {value['description']}"
            ))
        
        self.scenario_dropdown = ft.Dropdown(
            options=scenario_options,
            hint_text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞...",
            bgcolor=ft.Colors.WHITE,
            border_color="#E0E0E0",
            border_radius=15,
            content_padding=ft.padding.all(18),
            text_size=16,
            on_change=self.on_selection_change
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_label = ft.Text("‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", size=20, weight=ft.FontWeight.W_500)
        
        difficulty_options = [
            ft.dropdown.Option("easy", "üü¢ Easy (B1-B2) - –ü—Ä–æ—Å—Ç–∞—è –ª–µ–∫—Å–∏–∫–∞, –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
            ft.dropdown.Option("medium", "üü° Medium (B2-C1) - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å, 10-15 –ø–æ–¥—Å–∫–∞–∑–æ–∫"), 
            ft.dropdown.Option("hard", "üî¥ Hard (C1-C2) - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å, 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫")
        ]
        
        self.difficulty_dropdown = ft.Dropdown(
            options=difficulty_options,
            hint_text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...",
            bgcolor=ft.Colors.WHITE,
            border_color="#E0E0E0",
            border_radius=15,
            content_padding=ft.padding.all(18),
            text_size=16,
            on_change=self.on_selection_change
        )
        
        # üöÄ –£–ú–ù–ê–Ø –ö–ù–û–ü–ö–ê –°–¢–ê–†–¢ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.start_button = ft.ElevatedButton(
            content=ft.Text(
                "üöÄ –ù–ê–ß–ê–¢–¨ –î–ò–ê–õ–û–ì",
                size=20,
                weight=ft.FontWeight.BOLD,
                color=ft.Colors.WHITE,
                text_align=ft.TextAlign.CENTER
            ),
            bgcolor="#CCCCCC",  # –°–µ—Ä–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
            disabled=True,
            on_click=None,  # Explicitly set to None when disabled
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=25),
                padding=ft.padding.symmetric(horizontal=40, vertical=25),
                animation_duration=300,
                shadow_color=ft.Colors.with_opacity(0.20, ft.Colors.BLACK),
                elevation=2
            ),
            width=350,
            height=80
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
        selection_content = ft.Column([
            ft.Container(height=50),
            title,
            ft.Container(height=10),
            subtitle,
            ft.Container(height=60),
            scenario_label,
            ft.Container(height=15),
            self.scenario_dropdown,
            ft.Container(height=40),
            difficulty_label,
            ft.Container(height=15),
            self.difficulty_dropdown,
            ft.Container(height=50),
            self.start_button,
            ft.Container(height=20),
            ft.OutlinedButton(
                content=ft.Text("üìö –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", size=18, color="#2E7D32"),
                on_click=self.show_error_practice_screen,
                style=ft.ButtonStyle(
                    shape=ft.RoundedRectangleBorder(radius=20),
                    padding=ft.padding.symmetric(horizontal=30, vertical=20),
                    side=ft.BorderSide(2, "#2E7D32")
                ),
                width=350,
                height=70
            ),
            ft.Container(height=50),
        ],
        alignment=ft.MainAxisAlignment.START,
        horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        scrollable_main_content = ft.Column(
            [selection_content],
            scroll=ft.ScrollMode.ADAPTIVE, 
            expand=True,
            alignment=ft.MainAxisAlignment.START,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        self.page.controls.clear()
        self.page.add(scrollable_main_content)
        self.page.update()
    
    def on_selection_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–æ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if self.scenario_dropdown.value and self.difficulty_dropdown.value:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É - –¥–µ–ª–∞–µ–º —è—Ä–∫–æ–π –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
            self.start_button.bgcolor = "#25D366"  # –Ø—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
            self.start_button.disabled = False  # –ú–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å
            self.start_button.on_click = self.start_dialog  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.start_button.style.shadow_color = ft.Colors.with_opacity(0.40, ft.Colors.BLACK)
            self.start_button.style.elevation = 8
        else:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É - –¥–µ–ª–∞–µ–º —Å–µ—Ä–æ–π
            self.start_button.bgcolor = "#CCCCCC"  # –°–µ—Ä–∞—è
            self.start_button.disabled = True  # –ù–µ –∫–ª–∏–∫–∞–µ—Ç—Å—è
            self.start_button.on_click = None  # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.start_button.style.shadow_color = ft.Colors.with_opacity(0.20, ft.Colors.BLACK)
            self.start_button.style.elevation = 2
        
        self.page.update()
    
    def start_dialog(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"""
        if not self.scenario_dropdown.value or not self.difficulty_dropdown.value:
            return
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        self.cleanup_practice_files()
        
        scenario_key = int(self.scenario_dropdown.value)
        selected_template = templates[scenario_key]
        scenario_text = selected_template["description"]
        difficulty = self.difficulty_dropdown.value
        
        self.show_chat_screen(scenario_key, scenario_text, difficulty)
    
    def close_dialog(self, dialog):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
        dialog.open = False
        self.page.update()
    
    def show_chat_screen(self, scenario_key, scenario, difficulty):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —á–∞—Ç–∞"""
        self.current_screen = "chat"
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω —á–∞—Ç–∞
        self.chat_screen = ChatScreen(
            self.page, 
            self, 
            scenario_key, 
            scenario, 
            difficulty,
            self.client,
            self.dialog_manager
        )
        self.chat_screen.show()

    def show_dialog_summary_screen(self, dialog_id: str, scenario: str, difficulty: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –∏—Ç–æ–≥–∞–º–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–ø—Ü–∏—è–º–∏."""
        self.current_screen = "dialog_summary"
        self.page.controls.clear()

        summary_title = ft.Text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!", size=30, weight=ft.FontWeight.BOLD, color="#075E54")
        summary_details = ft.Text(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}", size=18, color="#333333", text_align=ft.TextAlign.CENTER)

        new_dialog_button = ft.ElevatedButton(
            content=ft.Text("üéâ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE),
            bgcolor="#25D366",
            on_click=lambda e: self.return_to_main_screen(),
            style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=20), padding=ft.padding.symmetric(horizontal=30, vertical=20)),
            width=300, height=60
        )

        practice_errors_button = ft.OutlinedButton(
            content=ft.Text("üìö –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", size=18, color="#075E54"),
            on_click=self.show_error_practice_screen, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=20), 
                padding=ft.padding.symmetric(horizontal=30, vertical=20),
                side=ft.BorderSide(2, "#075E54")
            ),
            width=300, height=60
        )

        summary_layout = ft.Column([
            ft.Container(height=60),
            summary_title,
            ft.Container(height=15),
            summary_details,
            ft.Container(height=50),
            new_dialog_button,
            ft.Container(height=20),
            practice_errors_button,
            ft.Container(height=60),
        ],
        alignment=ft.MainAxisAlignment.CENTER,
        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        expand=True
        )
        
        self.page.add(summary_layout)
        self.page.update()

    def show_error_practice_screen(self, e=None): # –î–æ–±–∞–≤–∏–º e=None –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å on_click
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏."""
        self.current_screen = "error_practice"
        self.page.controls.clear()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_coins = self.dialog_manager.get_user_coins()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–æ–Ω–µ—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –º–∞–≥–∞–∑–∏–Ω–∞
        header_row = ft.Row([
            ft.Text("üìö –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", size=30, weight=ft.FontWeight.BOLD, color="#075E54"),
            ft.Container(expand=True),  # –ó–∞–Ω–∏–º–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
            ft.Container(
                content=ft.Row([
                    ft.Text("ü™ô", size=24),
                    ft.Text(f"{user_coins}", size=20, weight=ft.FontWeight.BOLD, color="#FFB300")
                ]),
                bgcolor="#FFF9C4",
                border_radius=15,
                padding=ft.padding.symmetric(horizontal=15, vertical=8),
                border=ft.border.all(2, "#FFB300")
            ),
            ft.Container(width=10),
            ft.ElevatedButton(
                content=ft.Text("üõí –ú–∞–≥–∞–∑–∏–Ω", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE),
                bgcolor="#FF9800",
                on_click=self.show_shop_dialog,
                style=ft.ButtonStyle(
                    shape=ft.RoundedRectangleBorder(radius=15),
                    padding=ft.padding.symmetric(horizontal=20, vertical=10)
                ),
                height=45
            )
        ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN, vertical_alignment=ft.CrossAxisAlignment.CENTER)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        analyze_button = ft.ElevatedButton(
            content=ft.Text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE),
            bgcolor="#25D366",
            on_click=self.start_error_analysis,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=15),
                padding=ft.padding.symmetric(horizontal=30, vertical=20)
            ),
            width=400,
            height=70
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_text = ft.Text(
            """–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫:
            
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
‚úÖ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ 
‚úÖ –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ X6 ‚Üí X0 (–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ)
‚úÖ –ú–∞–∫—Å–∏–º—É–º 5 –æ—à–∏–±–æ–∫ –∑–∞ —Å–µ—Å—Å–∏—é, –ø–æ 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫—É

ü™ô –ù–∞–≥—Ä–∞–¥—ã:
‚Ä¢ +1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
‚Ä¢ +5 –º–æ–Ω–µ—Ç –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω—É—é –æ—Ç—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ (X0)

–¢–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:
‚Ä¢ –ó–∞–º–µ–Ω–∞ —Å–ª–æ–≤ 
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã (–∞–Ω–≥–ª ‚Üî —Ä—É—Å)
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞!""",
            size=14,
            color="#333333",
            text_align=ft.TextAlign.LEFT
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_results_container = ft.Column([], spacing=15)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = ft.ElevatedButton(
            "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", 
            on_click=lambda e: self.return_to_main_screen(), 
            bgcolor="#CCCCCC",
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=15),
                padding=ft.padding.symmetric(horizontal=30, vertical=15)
            )
        )

        layout = ft.Column([
            ft.Container(height=20),
            header_row,
            ft.Container(height=20),
            ft.Row([analyze_button], alignment=ft.MainAxisAlignment.CENTER),
            ft.Container(height=30),
            info_text,
            ft.Container(height=20),
            self.analysis_results_container,
            ft.Container(height=30),
            ft.Row([back_button], alignment=ft.MainAxisAlignment.CENTER)
        ],
        alignment=ft.MainAxisAlignment.START,
        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        scroll=ft.ScrollMode.ADAPTIVE,
        expand=True
        )

        self.page.add(layout)
        self.page.update()
    
    def show_shop_dialog(self, e):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –º–∞–≥–∞–∑–∏–Ω–∞ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π)"""
        user_coins = self.dialog_manager.get_user_coins()
        coins_data = self.dialog_manager.get_coins_data()
        
        shop_dialog = ft.AlertDialog(
            title=ft.Text("üõí –ú–∞–≥–∞–∑–∏–Ω", size=20, weight=ft.FontWeight.BOLD),
            content=ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Text("ü™ô", size=24),
                        ft.Text(f"–£ –≤–∞—Å: {user_coins} –º–æ–Ω–µ—Ç", size=16, weight=ft.FontWeight.BOLD, color="#FFB300")
                    ]),
                    ft.Container(height=20),
                    ft.Text(f"üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {coins_data.get('total_earned', 0)} –º–æ–Ω–µ—Ç", size=14, color="#666"),
                    ft.Container(height=20),
                    ft.Text("üöß –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:", size=14, color="#333"),
                    ft.Text("‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏", size=12, color="#666"),
                    ft.Text("‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–æ–≤", size=12, color="#666"),
                    ft.Text("‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", size=12, color="#666")
                ]),
                width=300,
                height=200
            ),
            actions=[
                ft.TextButton("–ó–∞–∫—Ä—ã—Ç—å", on_click=lambda _: self.close_dialog(shop_dialog))
            ]
        )
        
        self.page.overlay.append(shop_dialog)
        shop_dialog.open = True
        self.page.update()
    
    async def start_error_analysis(self, e):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        loading_text = ft.Text("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...", size=18, weight=ft.FontWeight.BOLD, text_align=ft.TextAlign.CENTER)
        progress_ring = ft.ProgressRing(width=32, height=32, stroke_width=4)
        
        loading_content = ft.Column(
            [
                ft.Container(height=self.page.window.height / 3 if self.page.window.height else 200),
                loading_text,
                ft.Container(height=20),
                progress_ring
            ],
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            alignment=ft.MainAxisAlignment.START
        )
        
        self.page.controls.clear()
        self.page.add(loading_content)
        self.page.update()

        try:
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            practice_session = self.create_test_exercises()
            
            if practice_session and practice_session.get("exercises"):
                self.show_analysis_results(practice_session)
            else:
                self.page.controls.clear()
                self.page.add(ft.Text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", size=20))
                self.page.add(ft.ElevatedButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", on_click=lambda _: self.return_to_main_screen()))
                self.page.update()

        except Exception as ex:
            self.page.controls.clear()
            self.page.add(ft.Text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}", size=18))
            self.page.add(ft.ElevatedButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", on_click=lambda _: self.return_to_main_screen()))
            self.page.update()
    
    def show_analysis_results(self, practice_session):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–µ—Ä–≤—ã–µ 5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        self.update_coins_display()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.current_practice_session = practice_session
        self.completed_exercises_count = 0

        back_button = ft.ElevatedButton(
            "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", 
            on_click=lambda e: self.return_to_main_screen(), 
            bgcolor="#CCCCCC",
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=15),
                padding=ft.padding.symmetric(horizontal=30, vertical=15)
            )
        )
        
        view_all_button = None

        page_content_controls = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = ft.Text(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
            f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—à–∏–±–æ–∫: {practice_session['total_errors_analyzed']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏: {practice_session['errors_for_practice']}\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {practice_session['total_exercises']}",
            size=14,
            color="#2E7D32",
            weight=ft.FontWeight.BOLD,
            text_align=ft.TextAlign.CENTER
        )
        page_content_controls.append(
            ft.Container(
                content=stats_text,
                alignment=ft.alignment.center,
                padding=ft.padding.only(bottom=20)
            )
        )
        
        # –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercises_title = ft.Text("üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", size=18, weight=ft.FontWeight.BOLD, color="#1976D2")
        page_content_controls.append(
            ft.Container(
                content=exercises_title,
                alignment=ft.alignment.center,
                padding=ft.padding.only(bottom=15)
            )
        )
        
        # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5)
        exercises_to_display = practice_session.get("exercises", [])[:5]
        exercise_cards_column_controls = []
        
        if not exercises_to_display:
            exercise_cards_column_controls.append(
                ft.Text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", size=16, color=ft.Colors.GREY_700)
            )
        else:
            for index, exercise_data in enumerate(exercises_to_display):
                card = self.create_exercise_card(exercise_data, index + 1)
                exercise_cards_column_controls.append(card)
        
        exercise_cards_column = ft.Column(
            exercise_cards_column_controls, 
            spacing=20, 
            expand=False,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        if len(practice_session["exercises"]) > 5:
            view_all_button = ft.ElevatedButton(
                content=ft.Text(
                    f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ {practice_session['total_exercises']} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
                    size=16,
                    weight=ft.FontWeight.BOLD,
                    color=ft.Colors.WHITE
                ),
                bgcolor="#2196F3",
                on_click=lambda e: self.show_all_exercises(practice_session),
                style=ft.ButtonStyle(
                    shape=ft.RoundedRectangleBorder(radius=15),
                    padding=ft.padding.symmetric(horizontal=30, vertical=20)
                ),
                width=350,
                height=60
            )
            exercise_cards_column.controls.append(
                ft.Container(
                    content=view_all_button,
                    alignment=ft.alignment.center,
                    padding=ft.padding.only(top=20)
                )
            )
        
        exercises_container = ft.Container(
            content=exercise_cards_column,
            padding=ft.padding.all(20),
            border_radius=10,
            alignment=ft.alignment.center
        )
        page_content_controls.append(exercises_container)
        page_content_controls.append(ft.Container(height=20))

        action_buttons_row_controls = [back_button]
        if view_all_button:
            action_buttons_row_controls.append(view_all_button)
        
        page_content_controls.append(
            ft.Row(action_buttons_row_controls, alignment=ft.MainAxisAlignment.CENTER)
        )

        analysis_results_page_layout = ft.Column(
            page_content_controls,
            alignment=ft.MainAxisAlignment.START,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            scroll=ft.ScrollMode.ADAPTIVE,
            expand=True
        )
        
        self.page.controls.clear()
        self.page.add(analysis_results_page_layout)
        self.page.update()
    
    def show_all_exercises(self, practice_session):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
        exercises = practice_session["exercises"]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        all_exercises_column = ft.Column(
            [], 
            scroll=ft.ScrollMode.ADAPTIVE, 
            spacing=15,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )
        
        for i, exercise in enumerate(exercises, 1):
            exercise_card = self.create_exercise_card(exercise, i)
            all_exercises_column.controls.append(exercise_card)
        
        # –î–∏–∞–ª–æ–≥ —Å–æ –≤—Å–µ–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
        all_exercises_dialog = ft.AlertDialog(
            title=ft.Text(
                f"üìã –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ({len(exercises)})",
                size=20,
                weight=ft.FontWeight.BOLD,
                text_align=ft.TextAlign.CENTER
            ),
            content=ft.Container(
                content=all_exercises_column,
                width=650,
                height=500,
                padding=ft.padding.all(10),
                alignment=ft.alignment.center
            ),
            actions=[
                ft.TextButton(
                    "–ó–∞–∫—Ä—ã—Ç—å",
                    on_click=lambda _: self.close_dialog(all_exercises_dialog),
                    style=ft.ButtonStyle(color=ft.colors.RED_ACCENT_700)
                )
            ],
            actions_alignment=ft.MainAxisAlignment.CENTER
        )
        
        self.page.overlay.append(all_exercises_dialog)
        all_exercises_dialog.open = True
        self.page.update()
    
    def create_exercise_card(self, exercise, number):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        exercise_type_names = {
            "word_replacement": "üîÑ –ó–∞–º–µ–Ω–∞ —Å–ª–æ–≤",
            "translation_en_ru": "üá∫üá∏‚Üíüá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π", 
            "translation_ru_en": "üá∑üá∫‚Üíüá∫üá∏ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "simple_sentences": "üìù –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            "text_composition": "üìñ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"
        }
        
        type_name = exercise_type_names.get(exercise["exercise_type"], exercise["exercise_type"])
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer_field = ft.TextField(
            hint_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...",
            hint_style=ft.TextStyle(color="#757575"),
            multiline=True,
            min_lines=3,
            max_lines=6,
            border_color="#2196F3",
            focused_border_color="#1976D2",
            border_radius=10,
            filled=True,
            bgcolor=ft.Colors.WHITE,
            content_padding=ft.padding.all(15),
            text_size=15,
            text_style=ft.TextStyle(color="#1A1A1A"),
            expand=True
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        result_container = ft.Container(
            content=ft.Text(""),
            visible=False,
            bgcolor="#F5F5F5",
            border_radius=10,
            padding=ft.padding.all(15),
            margin=ft.margin.only(top=10)
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_button = ft.ElevatedButton(
            content=ft.Row([
                ft.Icon(ft.Icons.CHECK_CIRCLE, size=18, color=ft.Colors.WHITE),
                ft.Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE)
            ], spacing=8, alignment=ft.MainAxisAlignment.CENTER),
            bgcolor="#4CAF50",
            on_click=lambda e: self.handle_check_exercise(exercise, answer_field, result_container, check_button),
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10),
                padding=ft.padding.symmetric(horizontal=20, vertical=15)
            ),
            width=150,
            height=50
        )

        # Determine content for the exercise text display
        exercise_display_content = self.format_exercise_content(exercise["content"], exercise["exercise_type"])

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        card_content = ft.Column([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            ft.Container(
                content=ft.Row([
                    ft.Text(f"{number}.", size=18, weight=ft.FontWeight.BOLD, color="#1976D2"),
                    ft.Text(type_name, size=16, weight=ft.FontWeight.BOLD, color="#1976D2"),
                    ft.Container(expand=True),
                    ft.Container(
                        content=ft.Text("ü™ô+1", size=12, weight=ft.FontWeight.BOLD, color="#FF8F00"),
                        bgcolor="#FFF8E1",
                        border_radius=8,
                        padding=ft.padding.symmetric(horizontal=8, vertical=4),
                        border=ft.border.all(1, "#FF8F00")
                    )
                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                padding=ft.padding.only(bottom=10)
            ),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
            ft.Container(
                content=ft.Column([
                    ft.Text("üéØ –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –æ—à–∏–±–∫–∞:", size=13, weight=ft.FontWeight.BOLD, color="#1976D2"),
                    ft.Text(
                        f"‚ùå {exercise['original_error']} ‚Üí ‚úÖ {exercise['correct_form']}", 
                        size=14, 
                        color="#1A1A1A",
                        weight=ft.FontWeight.W_600
                    )
                ], spacing=5),
                bgcolor="#E3F2FD",
                border_radius=8,
                padding=ft.padding.all(12),
                margin=ft.margin.only(bottom=15),
                border=ft.border.all(1, "#2196F3")
            ),
            
            # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            ft.Container(
                content=ft.Text(
                    exercise_display_content,
                    size=15, 
                    color="#1A1A1A",
                    selectable=True,
                    weight=ft.FontWeight.W_500
                ),
                bgcolor="#FFFFFF",
                border_radius=8,
                padding=ft.padding.all(20),
                margin=ft.margin.only(bottom=15),
                border=ft.border.all(2, "#2196F3")
            ),
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            answer_field,
            
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            ft.Container(
                content=check_button,
                alignment=ft.alignment.center,
                padding=ft.padding.only(top=15)
            ),
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            result_container
        ])
        
        return ft.Container(
            content=card_content,
            bgcolor=ft.Colors.WHITE,
            border_radius=15,
            padding=ft.padding.all(20),
            margin=ft.margin.only(bottom=20),
            border=ft.border.all(1, "#E0E0E0"),
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=10,
                color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                offset=ft.Offset(0, 2)
            ),
            width=600  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        )
    
    def handle_check_exercise(self, exercise, answer_field, result_container, check_button):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        import threading
        
        def run_async():
            import asyncio
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.check_exercise_async(exercise, answer_field, result_container, check_button))
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                result_container.content = ft.Text(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", size=14, color="#F44336")
                result_container.bgcolor = "#FFEBEE"
                result_container.visible = True
                self.page.update()
            finally:
                loop.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_async)
        thread.daemon = True
        thread.start()
    
    async def check_exercise_async(self, exercise, answer_field, result_container, check_button):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
        user_answer = answer_field.value.strip()
        if not user_answer:
            result_container.content = ft.Text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç", 
                size=14, 
                color="#FF9800",
                weight=ft.FontWeight.BOLD
            )
            result_container.bgcolor = "#FFF3E0"
            result_container.visible = True
            self.page.update()
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_button.disabled = True
        check_button.content = ft.Row([
            ft.ProgressRing(width=16, height=16, color=ft.Colors.WHITE),
            ft.Text("–ü—Ä–æ–≤–µ—Ä—è—é...", size=14, color=ft.Colors.WHITE)
        ], spacing=8, alignment=ft.MainAxisAlignment.CENTER)
        self.page.update()
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
            correct_form = exercise.get("correct_form", "").lower()
            is_correct = correct_form in user_answer.lower()
            
            if is_correct:
                # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
                new_coin_count = self.dialog_manager.add_coins(1, "exercise_completed")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                self.completed_exercises_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                total_exercises = self.current_practice_session.get("total_exercises", 0) if self.current_practice_session else 0
                if self.completed_exercises_count >= total_exercises:
                    # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
                    self.cleanup_practice_files()
                    print(f"üéâ –í—Å–µ {total_exercises} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –§–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏–∫ –æ—á–∏—â–µ–Ω—ã.")
                
                result_container.content = ft.Column([
                    ft.Row([
                        ft.Icon(ft.Icons.CHECK_CIRCLE, color="#4CAF50", size=20),
                        ft.Text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", size=16, weight=ft.FontWeight.BOLD, color="#2E7D32")
                    ]),
                    ft.Text("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É.", size=14, color="#1A1A1A"),
                    ft.Container(
                        content=ft.Row([
                            ft.Text("ü™ô", size=18),
                            ft.Text(f"+1 –º–æ–Ω–µ—Ç–∞! –í—Å–µ–≥–æ: {new_coin_count}", size=14, weight=ft.FontWeight.BOLD, color="#FF8F00")
                        ]),
                        bgcolor="#FFF8E1",
                        border_radius=8,
                        padding=ft.padding.all(10),
                        margin=ft.margin.only(top=10)
                    )
                ])
                result_container.bgcolor = "#E8F5E8"
                
                self.update_coins_display()
                
            else:
                result_container.content = ft.Column([
                    ft.Row([
                        ft.Icon(ft.Icons.ERROR, color="#F44336", size=20),
                        ft.Text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", size=16, weight=ft.FontWeight.BOLD, color="#D32F2F")
                    ]),
                    ft.Text("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ.", size=14, color="#1A1A1A"),
                    ft.Text(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '{exercise.get('correct_form', '')}'", size=14, color="#1976D2", weight=ft.FontWeight.W_600)
                ])
                result_container.bgcolor = "#FFEBEE"
            
            result_container.visible = True
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            check_button.content = ft.Row([
                ft.Icon(ft.Icons.DONE, size=18, color=ft.Colors.WHITE),
                ft.Text("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", size=14, color=ft.Colors.WHITE)
            ], spacing=8, alignment=ft.MainAxisAlignment.CENTER)
            check_button.bgcolor = "#9E9E9E"
            
        except Exception as ex:
            result_container.content = ft.Text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {ex}", 
                size=14, 
                color="#F44336"
            )
            result_container.bgcolor = "#FFEBEE"
            result_container.visible = True
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            check_button.disabled = False
            check_button.content = ft.Row([
                ft.Icon(ft.Icons.CHECK_CIRCLE, size=18, color=ft.Colors.WHITE),
                ft.Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", size=14, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE)
            ], spacing=8, alignment=ft.MainAxisAlignment.CENTER)
        
        self.page.update()
    
    def update_coins_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        pass

    def format_exercise_content(self, content, exercise_type=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not content:
            return "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        try:
            # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –µ—Å—Ç—å
            formatted_text = content.strip()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            formatted_text = formatted_text.replace("\\n", "\n")
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines = []
            for line in formatted_text.split('\n'):
                cleaned_line = line.strip()
                if cleaned_line:
                    lines.append(cleaned_line)
            
            formatted_text = '\n'.join(lines)
            
            return formatted_text if formatted_text.strip() else "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

    def create_simple_exercise(self, error_type, original_error, correct_form, exercise_number):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI"""
        exercise_types = [
            "word_replacement",
            "translation_en_ru", 
            "translation_ru_en"
        ]
        
        exercise_type = exercise_types[exercise_number % len(exercise_types)]
        
        if exercise_type == "word_replacement":
            content = f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:\n\n" \
                     f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {original_error}\n" \
                     f"–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
                     
        elif exercise_type == "translation_en_ru":
            content = f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n\n" \
                     f"{correct_form}\n\n" \
                     f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:"
                     
        elif exercise_type == "translation_ru_en":
            content = f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:\n\n" \
                     f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {correct_form}\n" \
                     f"–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–æ–π —Ñ–æ—Ä–º–æ–π:"
        
        return {
            "exercise_id": f"simple_{exercise_type}_{exercise_number}_{datetime.now().strftime('%H%M%S')}",
            "exercise_type": exercise_type,
            "exercise_number": exercise_number,
            "original_error": original_error,
            "correct_form": correct_form,
            "error_type": error_type,
            "content": content,
            "completed": False,
            "attempts": 0,
            "timestamp": datetime.now().isoformat()
        }

    def cleanup_practice_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
        try:
            sessions_dir = os.path.join(self.dialog_manager.logs_dir, "practice_sessions")
            if os.path.exists(sessions_dir):
                import shutil
                shutil.rmtree(sessions_dir)
                print("üóëÔ∏è –§–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫: {e}")

    def create_test_exercises(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        test_exercises = []
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏
        test_errors = [
            {"type": "grammar", "original": "I am go to school", "correct": "I am going to school"},
            {"type": "vocabulary", "original": "I have 20 years old", "correct": "I am 20 years old"},
            {"type": "preposition", "original": "I live at Moscow", "correct": "I live in Moscow"},
        ]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É
        exercise_counter = 1
        for error in test_errors:
            for i in range(3):  # 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫—É
                exercise = self.create_simple_exercise(
                    error["type"], 
                    error["original"], 
                    error["correct"], 
                    exercise_counter
                )
                test_exercises.append(exercise)
                exercise_counter += 1
        
        return {
            "session_id": f"test_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "timestamp": datetime.now().isoformat(),
            "total_errors_analyzed": 3,
            "errors_for_practice": 3,
            "total_exercises": 9,  # 3 –æ—à–∏–±–∫–∏ √ó 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            "exercises": test_exercises,
            "error_profile_snapshot": {}
        }

    def return_to_main_screen(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –æ—á–∏—Å—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫"""
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        self.cleanup_practice_files()
        self.show_start_screen()

class ChatScreen:
    def __init__(self, page: ft.Page, app: EnglishLearningApp, scenario_key, scenario, difficulty, client, dialog_manager):
        self.page = page
        self.app = app # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä EnglishLearningApp
        self.dialog_id = str(uuid.uuid4())
        self.scenario_key = scenario_key
        self.scenario = scenario
        self.difficulty = difficulty
        self.client = client
        self.dialog_manager = dialog_manager
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π OpenAI –∫–ª–∏–µ–Ω—Ç –≤ DialogManager
        self.dialog_manager.set_openai_client(self.client)
        self.language_filter = LanguageFilter()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        self.messages = []
        self.hint_count = 0
        self.max_hints = self.get_max_hints()
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.chat_container = None
        self.message_input = None
        self.hints_display = ft.Text(weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE) # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏
        self.help_dialog = HelpDialog(self.page, self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        self.setup_system_prompt()
    
    def get_max_hints(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        hints_map = {
            "easy": float('inf'),
            "medium": 15,
            "hard": 5
        }
        return hints_map.get(self.difficulty, 15)
    
    def setup_system_prompt(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        current_template_details = templates.get(self.scenario_key, {})
        aggression_response_for_role = current_template_details.get("aggression_response")

        system_content = get_system_prompt(
            scenario_description=self.scenario, 
            difficulty=self.difficulty,
            role_aggression_response=aggression_response_for_role
        )
        
        self.messages = [{"role": "system", "content": system_content}]
    
    def create_message_bubble(self, text, role):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—É–∑—ã—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ WhatsApp"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø—É–∑—ã—Ä—è
        bubble_max_width = self.page.window.width * 0.6 if self.page.window.width else 500
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        if role == "user":
            bgcolor = "#075E54"
            text_color = ft.Colors.WHITE
            alignment = ft.MainAxisAlignment.END
            margin_left = 60
            margin_right = 10
        elif role == "assistant":
            bgcolor = ft.Colors.WHITE
            text_color = "#333333"
            alignment = ft.MainAxisAlignment.START
            margin_left = 10
            margin_right = 60
        else:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            bgcolor = "#FFE0B2"
            text_color = "#5D4037"
            alignment = ft.MainAxisAlignment.CENTER
            margin_left = 40
            margin_right = 40
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–∑—ã—Ä—å —Å –æ–∫—Ä—É–≥–ª—ã–º–∏ —É–≥–ª–∞–º–∏ –∏ —Ç–µ–Ω—è–º–∏
        bubble = ft.Container(
            content=ft.Text(
                text,
                size=14,
                color=text_color,
                selectable=True
            ),
            bgcolor=bgcolor,
            border_radius=18,
            padding=ft.padding.symmetric(horizontal=16, vertical=12),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=3,
                color=ft.Colors.with_opacity(0.26, ft.Colors.BLACK),
                offset=ft.Offset(0, 1)
            ),
            animate=ft.animation.Animation(300, ft.AnimationCurve.EASE_OUT_CUBIC),
            margin=ft.margin.only(
                left=margin_left,
                right=margin_right,
                top=4,
                bottom=4
            ),
            width=bubble_max_width
        )
        
        return ft.Row([bubble], alignment=alignment)
    
    def add_message_to_chat(self, text, role):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if self.chat_container:
            message_bubble = self.create_message_bubble(text, role)
            self.chat_container.controls.append(message_bubble)
            self.page.update()
    
    async def send_message(self, e):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_text = self.message_input.value.strip()
        if not user_text:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.add_message_to_chat(user_text, "user")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        if self.language_filter.is_aggressive(user_text):
            detected_profanity_keywords = self.language_filter.get_detected_keywords(user_text)
            if detected_profanity_keywords:
                self.dialog_manager.log_raw_user_error(
                    dialog_id=self.dialog_id,
                    user_message_text=user_text,
                    detected_error_type="profanity",
                    raw_error_details=detected_profanity_keywords,
                    context={"scenario": self.scenario, "difficulty": self.difficulty}
                )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞
        common_russian_words = [
            "–¥–∞", "–Ω–µ—Ç", "–Ω–µ", "–∏", "–≤", "–Ω–∞", "—è", "—Ç—ã", "–æ–Ω", "–æ–Ω–∞", "–æ–Ω–æ", "–º—ã", "–≤—ã", "–æ–Ω–∏",
            "–º–æ–π", "—Ç–≤–æ–π", "–µ–≥–æ", "–µ–µ", "–∏—Ö", "–Ω–∞—à", "–≤–∞—à", "—ç—Ç–æ", "—Ç–æ—Ç", "—Ç–∞–∫", "–∫–∞–∫", "—á—Ç–æ", "–≥–¥–µ",
            "–∫–æ–≥–¥–∞", "–ø—Ä–∏–≤–µ—Ç", "–ø–æ–∫–∞", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "—Ö–æ—Ä–æ—à–æ", "–ø–ª–æ—Ö–æ", "—á—Ç–æ-—Ç–æ", "–ø–æ—á–µ–º—É"
        ]
        
        detected_russian_words = []
        user_words = user_text.lower().replace(',', '').replace('.', '').replace('!', '').replace('?', '').split()
        for word in user_words:
            if word in common_russian_words:
                detected_russian_words.append(word)
        
        if detected_russian_words:
            self.dialog_manager.log_raw_user_error(
                dialog_id=self.dialog_id,
                user_message_text=user_text,
                detected_error_type="russian_word_detected",
                raw_error_details=list(set(detected_russian_words)),
                context={"scenario": self.scenario, "difficulty": self.difficulty}
            )

        self.message_input.value = ""
        self.page.update()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥
        if any(word in user_text.lower() for word in ["–≤—ã—Ö–æ–¥", "exit", "bye"]):
            self.add_message_to_chat("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏!", "system")
            self.save_dialog_on_completion()
            self.app.show_dialog_summary_screen(self.dialog_id, self.scenario, self.difficulty)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —è–∑—ã–∫
        if self.language_filter.is_aggressive(user_text):
            detected_keywords = self.language_filter.get_detected_keywords(user_text)
            role_keywords_present = False
            current_template = templates.get(self.scenario_key)
            if current_template and "keywords_for_reaction_check" in current_template:
                for r_keyword in current_template["keywords_for_reaction_check"]:
                    if r_keyword in user_text.lower():
                        role_keywords_present = True
                        break
            should_react_aggressively = role_keywords_present or (current_template and "keywords_for_reaction_check" not in current_template)

            if should_react_aggressively:
                aggression_response_text = templates.get(self.scenario_key, {}).get("aggression_response", "Please be respectful. I'm here to help you practice English.")
                self.add_message_to_chat(f"AI (System Reaction): {aggression_response_text}", "system")
                self.dialog_manager.save_aggressive_language_incident(
                    dialog_id=self.dialog_id,
                    user_message=user_text,
                    detected_keywords=detected_keywords,
                    role_reaction=aggression_response_text,
                    scenario=self.scenario,
                    difficulty=self.difficulty
                )
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages.append({"role": "user", "content": user_text})
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="gpt-3.5-turbo",
                messages=self.messages
            )
            
            answer = response.choices[0].message.content
            self.add_message_to_chat(answer, "assistant")
            self.messages.append({"role": "assistant", "content": answer})
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            asyncio.create_task(
                self.dialog_manager.analyze_and_save_detailed_user_errors(
                    dialog_id=self.dialog_id,
                    user_message_text=user_text,
                    full_dialog_history=self.messages
                )
            )
            
        except Exception as ex:
            self.add_message_to_chat(f"–û—à–∏–±–∫–∞: {ex}", "error")
            self.dialog_manager.save_error("api_error", str(ex), {
                "scenario": self.scenario,
                "difficulty": self.difficulty,
                "user_message": user_text
            })
    
    def save_dialog_on_completion(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        if len(self.messages) > 1:  # –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ system
            self.dialog_manager.save_dialog(self.dialog_id, self.scenario, self.difficulty, self.messages)
            print(f"Dialog (ID: {self.dialog_id}) saved: {len(self.messages)} messages")
    
    def go_back(self, e):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω –∏—Ç–æ–≥–æ–≤"""
        self.save_dialog_on_completion()
        self.app.show_dialog_summary_screen(self.dialog_id, self.scenario, self.difficulty)
        self.hint_count = 0
    
    async def show_help(self, e):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–º–æ—â–∏"""
        await self.help_dialog.show_help_dialog()

    def _update_hints_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥—Å–∫–∞–∑–æ–∫."""
        if self.max_hints == float('inf'):
            self.hints_display.value = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: ‚àû"
        else:
            remaining_hints = max(0, self.max_hints - self.hint_count)
            self.hints_display.value = f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: {remaining_hints}/{self.max_hints}"
        
        if self.page and self.hints_display.page:
             self.page.update(self.hints_display)

    def show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —á–∞—Ç–∞"""
        self._update_hints_display()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ft.Container(
            content=ft.Row([
                ft.IconButton(
                    ft.icons.ARROW_BACK,
                    icon_color=ft.Colors.WHITE,
                    on_click=self.go_back,
                    tooltip="–ù–∞–∑–∞–¥"
                ),
                ft.Column([
                    ft.Text(
                        f"üìã {self.scenario}",
                        size=16,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE,
                        max_lines=2
                    ),
                    ft.Text(
                        f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.difficulty.upper()}",
                        size=12,
                        color=ft.Colors.with_opacity(0.70, ft.Colors.WHITE)
                    )
                ], spacing=2),
                ft.Container(expand=True),
                self.hints_display,
                ft.Container(width=10),
                ft.IconButton(
                    ft.icons.HELP_OUTLINE,
                    icon_color=ft.Colors.WHITE,
                    on_click=self.show_help
                )
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN, vertical_alignment=ft.CrossAxisAlignment.CENTER),
            bgcolor="#075E54",
            padding=ft.padding.all(15),
            border_radius=ft.border_radius.only(bottom_left=15, bottom_right=15)
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_container = ft.Column(
            controls=[],
            scroll=ft.ScrollMode.AUTO,
            auto_scroll=True,
            spacing=2
        )
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        chat_area = ft.Container(
            content=self.chat_container,
            bgcolor="#E5DDD5",
            expand=True,
            padding=ft.padding.all(10),
            border_radius=10
        )
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_input = ft.TextField(
            hint_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
            border_color="#E0E0E0",
            border_radius=25,
            filled=True,
            bgcolor=ft.Colors.WHITE,
            content_padding=ft.padding.symmetric(horizontal=20, vertical=15),
            text_size=14,
            on_submit=self.send_message,
            expand=True
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_button = ft.Container(
            content=ft.Icon(ft.icons.SEND, color=ft.Colors.WHITE, size=24),
            bgcolor="#25D366",
            border_radius=25,
            width=50,
            height=50,
            ink=True,
            on_click=self.send_message,
            alignment=ft.alignment.center,
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=5,
                color=ft.Colors.with_opacity(0.26, ft.Colors.BLACK),
                offset=ft.Offset(0, 2)
            )
        )
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_row = ft.Row([
            self.message_input,
            ft.Container(width=10),
            send_button
        ], spacing=0)
        
        input_panel = ft.Container(
            content=input_row,
            bgcolor=ft.Colors.WHITE,
            padding=ft.padding.all(15),
            border_radius=ft.border_radius.only(top_left=15, top_right=15),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=10,
                color=ft.Colors.with_opacity(0.12, ft.Colors.BLACK),
                offset=ft.Offset(0, -2)
            )
        )
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞
        main_chat = ft.Column([
            header,
            chat_area,
            input_panel
        ], spacing=0, expand=True)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç
        self.page.controls.clear()
        self.page.add(main_chat)
        self.page.update()


def main(page: ft.Page):
    app = EnglishLearningApp(page)
    # global_app_instance = app # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ –≥–¥–µ-—Ç–æ –µ—â–µ

if __name__ == '__main__':
    ft.app(target=main) 